package com.redhat.ceylon.compiler.java.test.statement.loop;

class MethodForIterator implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    
    MethodForIterator() {
    }
    
    public final void m(final .ceylon.language.Sequence<? extends .ceylon.language.Integer> seq) {
        boolean loopentered$0 = false;
        .java.lang.Object elem$1;
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> i$iterator$$2 = seq.iterator();
        loop_0: while (!((elem$1 = i$iterator$$2.next()) instanceof .ceylon.language.Finished)) {
            loopentered$0 = true;
            final long i = ((.ceylon.language.Integer)elem$1).longValue();
            if (i > 5L) {
            }
        }
        if (!loopentered$0) throw new .ceylon.language.AssertionError("nonempty Iterable with initial \'finished\' element");
    }
    
    public final void m2() {
        boolean loopentered$4 = false;
        .java.lang.Object elem$5;
        .ceylon.language.Iterator<? extends .ceylon.language.String> s$iterator$$6 = new .com.redhat.ceylon.compiler.java.language.LazyIterable<.ceylon.language.String, .java.lang.Object>(.ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, 3, false){
            
            @.java.lang.Override
            protected final .java.lang.Object $evaluate$(int $index$) {
                switch ($index$) {
                case 0: 
                    return .ceylon.language.String.instance("aap");
                
                case 1: 
                    return .ceylon.language.String.instance("noot");
                
                case 2: 
                    return .ceylon.language.String.instance("mies");
                
                default: 
                    return null;
                
                }
            }
        }.iterator();
        loop_1: while (!((elem$5 = s$iterator$$6.next()) instanceof .ceylon.language.Finished)) {
            loopentered$4 = true;
            final .java.lang.String s = ((.ceylon.language.String)elem$5).toString();
        }
        if (!loopentered$4) throw new .ceylon.language.AssertionError("nonempty Iterable with initial \'finished\' element");
        boolean loopentered$7 = false;
        .java.lang.Object elem$8;
        .ceylon.language.Iterator<? extends .ceylon.language.String> s$iterator$$9 = new .com.redhat.ceylon.compiler.java.language.LazyIterable<.ceylon.language.String, .java.lang.Object>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.null_.$TypeDescriptor$), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, 3, false){
            
            @.java.lang.Override
            protected final .java.lang.Object $evaluate$(int $index$) {
                switch ($index$) {
                case 0: 
                    return .ceylon.language.String.instance("aap");
                
                case 1: 
                    return null;
                
                case 2: 
                    return .ceylon.language.String.instance("mies");
                
                default: 
                    return null;
                
                }
            }
        }.iterator();
        loop_2: while (!((elem$8 = s$iterator$$9.next()) instanceof .ceylon.language.Finished)) {
            loopentered$7 = true;
            final .ceylon.language.String s = (.ceylon.language.String)elem$8;
        }
        if (!loopentered$7) throw new .ceylon.language.AssertionError("nonempty Iterable with initial \'finished\' element");
        boolean loopentered$10 = false;
        .java.lang.Object elem$11;
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> n$iterator$$12 = new .com.redhat.ceylon.compiler.java.language.LazyIterable<.ceylon.language.Integer, .java.lang.Object>(.ceylon.language.Integer.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, 3, false){
            
            @.java.lang.Override
            protected final .java.lang.Object $evaluate$(int $index$) {
                switch ($index$) {
                case 0: 
                    return .ceylon.language.Integer.instance(1L);
                
                case 1: 
                    return .ceylon.language.Integer.instance(2L);
                
                case 2: 
                    return .ceylon.language.Integer.instance(3L);
                
                default: 
                    return null;
                
                }
            }
        }.iterator();
        loop_3: while (!((elem$11 = n$iterator$$12.next()) instanceof .ceylon.language.Finished)) {
            loopentered$10 = true;
            final long n = ((.ceylon.language.Integer)elem$11).longValue();
        }
        if (!loopentered$10) throw new .ceylon.language.AssertionError("nonempty Iterable with initial \'finished\' element");
        boolean loopentered$13 = false;
        .java.lang.Object elem$14;
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> n$iterator$$15 = new .com.redhat.ceylon.compiler.java.language.LazyIterable<.ceylon.language.Integer, .java.lang.Object>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.null_.$TypeDescriptor$), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, 3, false){
            
            @.java.lang.Override
            protected final .java.lang.Object $evaluate$(int $index$) {
                switch ($index$) {
                case 0: 
                    return .ceylon.language.Integer.instance(1L);
                
                case 1: 
                    return null;
                
                case 2: 
                    return .ceylon.language.Integer.instance(3L);
                
                default: 
                    return null;
                
                }
            }
        }.iterator();
        loop_4: while (!((elem$14 = n$iterator$$15.next()) instanceof .ceylon.language.Finished)) {
            loopentered$13 = true;
            final .ceylon.language.Integer n = (.ceylon.language.Integer)elem$14;
        }
        if (!loopentered$13) throw new .ceylon.language.AssertionError("nonempty Iterable with initial \'finished\' element");
        .java.lang.String s$17 = "wim";
        int length$18 = s$17.length();
        loop_5: for (int index$19 = 0; index$19 < length$18; ) {
            final int c = s$17.codePointAt(index$19);
            index$19 += .java.lang.Character.charCount(c);
        }
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.statement.loop.MethodForIterator.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.statement.loop.MethodForIterator.class);
}