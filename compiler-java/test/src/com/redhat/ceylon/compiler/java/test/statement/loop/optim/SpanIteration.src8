package com.redhat.ceylon.compiler.java.test.statement.loop.optim;

class IntegerSpans implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    
    protected IntegerSpans() {
        super();
        this.first = 0L;
        this.last = 0L;
        this.a = false;
    }
    
    IntegerSpans(final long first, final long last) {
        this.first = first;
        this.last = last;
        this.a = ((.ceylon.language.Boolean)(.java.lang.Object).ceylon.language.nothing_.get_()).booleanValue();
    }
    private final long first;
    
    private final long getFirst$priv$() {
        return first;
    }
    private final long last;
    
    private final long getLast$priv$() {
        return last;
    }
    private final boolean a;
    
    private final boolean getA$priv$() {
        return a;
    }
    
    private final void simple$priv$() {
        final long $ceylontmp$first$2 = getFirst$priv$();
        final long $ceylontmp$last$3 = getLast$priv$();
        final boolean $ceylontmp$increasing$4 = .ceylon.language.Integer.offset($ceylontmp$last$3, $ceylontmp$first$2) >= 0;
        final long $ceylontmp$incr$5 = $ceylontmp$increasing$4 ? 1L : -1L;
        long i$8 = $ceylontmp$first$2;
        long $ceylontmp$element$7 = $ceylontmp$first$2;
        boolean $ceylontmp$f$6 = false;
        loop_0: do {
            if ($ceylontmp$f$6) $ceylontmp$element$7 += $ceylontmp$incr$5;
            $ceylontmp$f$6 = true;
            i$8 = $ceylontmp$element$7;
            final long i = i$8;
            $ceylontmp$continue$1: do {
                .ceylon.language.print_.print(.ceylon.language.String.instance(new .java.lang.StringBuilder().append("body ").append(i).toString()));
            }             while (false);
        }         while ($ceylontmp$increasing$4 ? i$8 - $ceylontmp$last$3 != 0L : i$8 - $ceylontmp$last$3 != 0L);
    }
    
    private final void withBreak$priv$() {
        final long $ceylontmp$first$11 = getFirst$priv$();
        final long $ceylontmp$last$12 = getLast$priv$();
        final boolean $ceylontmp$increasing$13 = .ceylon.language.Integer.offset($ceylontmp$last$12, $ceylontmp$first$11) >= 0;
        final long $ceylontmp$incr$14 = $ceylontmp$increasing$13 ? 1L : -1L;
        long i$17 = $ceylontmp$first$11;
        long $ceylontmp$element$16 = $ceylontmp$first$11;
        boolean $ceylontmp$f$15 = false;
        loop_1: do {
            if ($ceylontmp$f$15) $ceylontmp$element$16 += $ceylontmp$incr$14;
            $ceylontmp$f$15 = true;
            i$17 = $ceylontmp$element$16;
            final long i = i$17;
            $ceylontmp$continue$10: do {
                if (getA$priv$()) {
                    break loop_1;
                }
                .ceylon.language.print_.print(.ceylon.language.String.instance(new .java.lang.StringBuilder().append("body ").append(i).toString()));
            }             while (false);
        }         while ($ceylontmp$increasing$13 ? i$17 - $ceylontmp$last$12 != 0L : i$17 - $ceylontmp$last$12 != 0L);
    }
    
    private final void withContinue$priv$() {
        final long $ceylontmp$first$21 = getFirst$priv$();
        final long $ceylontmp$last$22 = getLast$priv$();
        final boolean $ceylontmp$increasing$23 = .ceylon.language.Integer.offset($ceylontmp$last$22, $ceylontmp$first$21) >= 0;
        final long $ceylontmp$incr$24 = $ceylontmp$increasing$23 ? 1L : -1L;
        long i$27 = $ceylontmp$first$21;
        long $ceylontmp$element$26 = $ceylontmp$first$21;
        boolean $ceylontmp$f$25 = false;
        loop_2: do {
            if ($ceylontmp$f$25) $ceylontmp$element$26 += $ceylontmp$incr$24;
            $ceylontmp$f$25 = true;
            i$27 = $ceylontmp$element$26;
            final long i = i$27;
            $ceylontmp$continue$20: do {
                if (getA$priv$()) {
                    break $ceylontmp$continue$20;
                }
                .ceylon.language.print_.print(.ceylon.language.String.instance(new .java.lang.StringBuilder().append("body ").append(i).toString()));
            }             while (false);
        }         while ($ceylontmp$increasing$23 ? i$27 - $ceylontmp$last$22 != 0L : i$27 - $ceylontmp$last$22 != 0L);
    }
    
    private final void withElseButNoExit$priv$() {
        final long $ceylontmp$first$31 = getFirst$priv$();
        final long $ceylontmp$last$32 = getLast$priv$();
        final boolean $ceylontmp$increasing$33 = .ceylon.language.Integer.offset($ceylontmp$last$32, $ceylontmp$first$31) >= 0;
        final long $ceylontmp$incr$34 = $ceylontmp$increasing$33 ? 1L : -1L;
        long i$37 = $ceylontmp$first$31;
        long $ceylontmp$element$36 = $ceylontmp$first$31;
        boolean $ceylontmp$f$35 = false;
        loop_3: do {
            if ($ceylontmp$f$35) $ceylontmp$element$36 += $ceylontmp$incr$34;
            $ceylontmp$f$35 = true;
            i$37 = $ceylontmp$element$36;
            final long i = i$37;
            $ceylontmp$continue$30: do {
                .ceylon.language.print_.print(.ceylon.language.String.instance(new .java.lang.StringBuilder().append("body ").append(i).toString()));
            }             while (false);
        }         while ($ceylontmp$increasing$33 ? i$37 - $ceylontmp$last$32 != 0L : i$37 - $ceylontmp$last$32 != 0L);
        .ceylon.language.print_.print(.ceylon.language.String.instance("else"));
    }
    
    private final void withElseAndExit$priv$() {
        boolean doforelse$38 = true;
        final long $ceylontmp$first$41 = getFirst$priv$();
        final long $ceylontmp$last$42 = getLast$priv$();
        final boolean $ceylontmp$increasing$43 = .ceylon.language.Integer.offset($ceylontmp$last$42, $ceylontmp$first$41) >= 0;
        final long $ceylontmp$incr$44 = $ceylontmp$increasing$43 ? 1L : -1L;
        long i$47 = $ceylontmp$first$41;
        long $ceylontmp$element$46 = $ceylontmp$first$41;
        boolean $ceylontmp$f$45 = false;
        loop_4: do {
            if ($ceylontmp$f$45) $ceylontmp$element$46 += $ceylontmp$incr$44;
            $ceylontmp$f$45 = true;
            i$47 = $ceylontmp$element$46;
            final long i = i$47;
            $ceylontmp$continue$40: do {
                if (getA$priv$()) {
                    doforelse$38 = false;
                    break loop_4;
                }
                .ceylon.language.print_.print(.ceylon.language.String.instance(new .java.lang.StringBuilder().append("body ").append(i).toString()));
            }             while (false);
        }         while ($ceylontmp$increasing$43 ? i$47 - $ceylontmp$last$42 != 0L : i$47 - $ceylontmp$last$42 != 0L);
        if (doforelse$38) {
            .ceylon.language.print_.print(.ceylon.language.String.instance("else"));
        }
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.statement.loop.optim.IntegerSpans.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.statement.loop.optim.IntegerSpans.class);
}
class IntegerSpansWithStep implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    
    protected IntegerSpansWithStep() {
        super();
        this.first = 0L;
        this.last = 0L;
        this.step = 0L;
        this.a = false;
    }
    
    IntegerSpansWithStep(final long first, final long last, final long step) {
        this.first = first;
        this.last = last;
        this.step = step;
        this.a = ((.ceylon.language.Boolean)(.java.lang.Object).ceylon.language.nothing_.get_()).booleanValue();
    }
    private final long first;
    
    private final long getFirst$priv$() {
        return first;
    }
    private final long last;
    
    private final long getLast$priv$() {
        return last;
    }
    private final long step;
    
    private final long getStep$priv$() {
        return step;
    }
    private final boolean a;
    
    private final boolean getA$priv$() {
        return a;
    }
    
    private final void simple$priv$() {
        final long $ceylontmp$step$58 = getStep$priv$();
        if ($ceylontmp$step$58 <= 0) throw new .ceylon.language.AssertionError("Assertion failed" + ": step size must be greater than zero" + (.java.lang.System.lineSeparator() + "\tviolated " + "step > 0"));
        final long $ceylontmp$first$51 = getFirst$priv$();
        final long $ceylontmp$last$52 = getLast$priv$();
        final boolean $ceylontmp$increasing$53 = $ceylontmp$step$58 == 1 ? .ceylon.language.Integer.offset($ceylontmp$last$52, $ceylontmp$first$51) >= 0 : .ceylon.language.Integer.offsetSign($ceylontmp$last$52, $ceylontmp$first$51) >= 0;
        final long $ceylontmp$incr$54 = $ceylontmp$step$58 == 1 ? $ceylontmp$increasing$53 ? $ceylontmp$step$58 : -1L : $ceylontmp$increasing$53 ? $ceylontmp$step$58 : -$ceylontmp$step$58;
        long i$57 = $ceylontmp$first$51;
        long $ceylontmp$element$56 = $ceylontmp$first$51;
        boolean $ceylontmp$f$55 = false;
        loop_5: do {
            if ($ceylontmp$f$55 && $ceylontmp$step$58 == 1L) $ceylontmp$step$58 == 1 ? $ceylontmp$element$56 += $ceylontmp$incr$54 : ($ceylontmp$element$56 = .ceylon.language.Integer.neighbour($ceylontmp$element$56, $ceylontmp$incr$54));
            $ceylontmp$f$55 = true;
            i$57 = $ceylontmp$element$56;
            final long i = i$57;
            $ceylontmp$continue$50: do {
                .ceylon.language.print_.print(.ceylon.language.String.instance(new .java.lang.StringBuilder().append("body ").append(i).toString()));
            }             while (false);
            if ($ceylontmp$step$58 != 1L) $ceylontmp$step$58 == 1 ? $ceylontmp$element$56 += $ceylontmp$incr$54 : ($ceylontmp$element$56 = .ceylon.language.Integer.neighbour($ceylontmp$element$56, $ceylontmp$incr$54));
        }         while ($ceylontmp$step$58 == 1L ? $ceylontmp$step$58 == 1 ? $ceylontmp$increasing$53 ? i$57 - $ceylontmp$last$52 != 0L : i$57 - $ceylontmp$last$52 != 0L : $ceylontmp$increasing$53 ? .ceylon.language.Integer.offsetSign(i$57, $ceylontmp$last$52) <= 0L && .ceylon.language.Integer.offsetSign(i$57, $ceylontmp$first$51) >= 0L : .ceylon.language.Integer.offsetSign(i$57, $ceylontmp$last$52) >= 0L && .ceylon.language.Integer.offsetSign(i$57, $ceylontmp$first$51) <= 0L : $ceylontmp$step$58 == 1 ? $ceylontmp$increasing$53 ? $ceylontmp$element$56 - $ceylontmp$last$52 != 0L : $ceylontmp$element$56 - $ceylontmp$last$52 != 0L : $ceylontmp$increasing$53 ? .ceylon.language.Integer.offsetSign($ceylontmp$element$56, $ceylontmp$last$52) <= 0L && .ceylon.language.Integer.offsetSign($ceylontmp$element$56, $ceylontmp$first$51) >= 0L : .ceylon.language.Integer.offsetSign($ceylontmp$element$56, $ceylontmp$last$52) >= 0L && .ceylon.language.Integer.offsetSign($ceylontmp$element$56, $ceylontmp$first$51) <= 0L);
    }
    
    private final void withBreak$priv$() {
        final long $ceylontmp$step$68 = getStep$priv$();
        if ($ceylontmp$step$68 <= 0) throw new .ceylon.language.AssertionError("Assertion failed" + ": step size must be greater than zero" + (.java.lang.System.lineSeparator() + "\tviolated " + "step > 0"));
        final long $ceylontmp$first$61 = getFirst$priv$();
        final long $ceylontmp$last$62 = getLast$priv$();
        final boolean $ceylontmp$increasing$63 = $ceylontmp$step$68 == 1 ? .ceylon.language.Integer.offset($ceylontmp$last$62, $ceylontmp$first$61) >= 0 : .ceylon.language.Integer.offsetSign($ceylontmp$last$62, $ceylontmp$first$61) >= 0;
        final long $ceylontmp$incr$64 = $ceylontmp$step$68 == 1 ? $ceylontmp$increasing$63 ? $ceylontmp$step$68 : -1L : $ceylontmp$increasing$63 ? $ceylontmp$step$68 : -$ceylontmp$step$68;
        long i$67 = $ceylontmp$first$61;
        long $ceylontmp$element$66 = $ceylontmp$first$61;
        boolean $ceylontmp$f$65 = false;
        loop_6: do {
            if ($ceylontmp$f$65 && $ceylontmp$step$68 == 1L) $ceylontmp$step$68 == 1 ? $ceylontmp$element$66 += $ceylontmp$incr$64 : ($ceylontmp$element$66 = .ceylon.language.Integer.neighbour($ceylontmp$element$66, $ceylontmp$incr$64));
            $ceylontmp$f$65 = true;
            i$67 = $ceylontmp$element$66;
            final long i = i$67;
            $ceylontmp$continue$60: do {
                if (getA$priv$()) {
                    break loop_6;
                }
                .ceylon.language.print_.print(.ceylon.language.String.instance(new .java.lang.StringBuilder().append("body ").append(i).toString()));
            }             while (false);
            if ($ceylontmp$step$68 != 1L) $ceylontmp$step$68 == 1 ? $ceylontmp$element$66 += $ceylontmp$incr$64 : ($ceylontmp$element$66 = .ceylon.language.Integer.neighbour($ceylontmp$element$66, $ceylontmp$incr$64));
        }         while ($ceylontmp$step$68 == 1L ? $ceylontmp$step$68 == 1 ? $ceylontmp$increasing$63 ? i$67 - $ceylontmp$last$62 != 0L : i$67 - $ceylontmp$last$62 != 0L : $ceylontmp$increasing$63 ? .ceylon.language.Integer.offsetSign(i$67, $ceylontmp$last$62) <= 0L && .ceylon.language.Integer.offsetSign(i$67, $ceylontmp$first$61) >= 0L : .ceylon.language.Integer.offsetSign(i$67, $ceylontmp$last$62) >= 0L && .ceylon.language.Integer.offsetSign(i$67, $ceylontmp$first$61) <= 0L : $ceylontmp$step$68 == 1 ? $ceylontmp$increasing$63 ? $ceylontmp$element$66 - $ceylontmp$last$62 != 0L : $ceylontmp$element$66 - $ceylontmp$last$62 != 0L : $ceylontmp$increasing$63 ? .ceylon.language.Integer.offsetSign($ceylontmp$element$66, $ceylontmp$last$62) <= 0L && .ceylon.language.Integer.offsetSign($ceylontmp$element$66, $ceylontmp$first$61) >= 0L : .ceylon.language.Integer.offsetSign($ceylontmp$element$66, $ceylontmp$last$62) >= 0L && .ceylon.language.Integer.offsetSign($ceylontmp$element$66, $ceylontmp$first$61) <= 0L);
    }
    
    private final void withContinue$priv$() {
        final long $ceylontmp$step$79 = getStep$priv$();
        if ($ceylontmp$step$79 <= 0) throw new .ceylon.language.AssertionError("Assertion failed" + ": step size must be greater than zero" + (.java.lang.System.lineSeparator() + "\tviolated " + "step > 0"));
        final long $ceylontmp$first$72 = getFirst$priv$();
        final long $ceylontmp$last$73 = getLast$priv$();
        final boolean $ceylontmp$increasing$74 = $ceylontmp$step$79 == 1 ? .ceylon.language.Integer.offset($ceylontmp$last$73, $ceylontmp$first$72) >= 0 : .ceylon.language.Integer.offsetSign($ceylontmp$last$73, $ceylontmp$first$72) >= 0;
        final long $ceylontmp$incr$75 = $ceylontmp$step$79 == 1 ? $ceylontmp$increasing$74 ? $ceylontmp$step$79 : -1L : $ceylontmp$increasing$74 ? $ceylontmp$step$79 : -$ceylontmp$step$79;
        long i$78 = $ceylontmp$first$72;
        long $ceylontmp$element$77 = $ceylontmp$first$72;
        boolean $ceylontmp$f$76 = false;
        loop_7: do {
            if ($ceylontmp$f$76 && $ceylontmp$step$79 == 1L) $ceylontmp$step$79 == 1 ? $ceylontmp$element$77 += $ceylontmp$incr$75 : ($ceylontmp$element$77 = .ceylon.language.Integer.neighbour($ceylontmp$element$77, $ceylontmp$incr$75));
            $ceylontmp$f$76 = true;
            i$78 = $ceylontmp$element$77;
            final long i = i$78;
            $ceylontmp$continue$71: do {
                if (getA$priv$()) {
                    break $ceylontmp$continue$71;
                }
                .ceylon.language.print_.print(.ceylon.language.String.instance(new .java.lang.StringBuilder().append("body ").append(i).toString()));
            }             while (false);
            if ($ceylontmp$step$79 != 1L) $ceylontmp$step$79 == 1 ? $ceylontmp$element$77 += $ceylontmp$incr$75 : ($ceylontmp$element$77 = .ceylon.language.Integer.neighbour($ceylontmp$element$77, $ceylontmp$incr$75));
        }         while ($ceylontmp$step$79 == 1L ? $ceylontmp$step$79 == 1 ? $ceylontmp$increasing$74 ? i$78 - $ceylontmp$last$73 != 0L : i$78 - $ceylontmp$last$73 != 0L : $ceylontmp$increasing$74 ? .ceylon.language.Integer.offsetSign(i$78, $ceylontmp$last$73) <= 0L && .ceylon.language.Integer.offsetSign(i$78, $ceylontmp$first$72) >= 0L : .ceylon.language.Integer.offsetSign(i$78, $ceylontmp$last$73) >= 0L && .ceylon.language.Integer.offsetSign(i$78, $ceylontmp$first$72) <= 0L : $ceylontmp$step$79 == 1 ? $ceylontmp$increasing$74 ? $ceylontmp$element$77 - $ceylontmp$last$73 != 0L : $ceylontmp$element$77 - $ceylontmp$last$73 != 0L : $ceylontmp$increasing$74 ? .ceylon.language.Integer.offsetSign($ceylontmp$element$77, $ceylontmp$last$73) <= 0L && .ceylon.language.Integer.offsetSign($ceylontmp$element$77, $ceylontmp$first$72) >= 0L : .ceylon.language.Integer.offsetSign($ceylontmp$element$77, $ceylontmp$last$73) >= 0L && .ceylon.language.Integer.offsetSign($ceylontmp$element$77, $ceylontmp$first$72) <= 0L);
    }
    
    private final void withElseButNoExit$priv$() {
        final long $ceylontmp$step$90 = getStep$priv$();
        if ($ceylontmp$step$90 <= 0) throw new .ceylon.language.AssertionError("Assertion failed" + ": step size must be greater than zero" + (.java.lang.System.lineSeparator() + "\tviolated " + "step > 0"));
        final long $ceylontmp$first$83 = getFirst$priv$();
        final long $ceylontmp$last$84 = getLast$priv$();
        final boolean $ceylontmp$increasing$85 = $ceylontmp$step$90 == 1 ? .ceylon.language.Integer.offset($ceylontmp$last$84, $ceylontmp$first$83) >= 0 : .ceylon.language.Integer.offsetSign($ceylontmp$last$84, $ceylontmp$first$83) >= 0;
        final long $ceylontmp$incr$86 = $ceylontmp$step$90 == 1 ? $ceylontmp$increasing$85 ? $ceylontmp$step$90 : -1L : $ceylontmp$increasing$85 ? $ceylontmp$step$90 : -$ceylontmp$step$90;
        long i$89 = $ceylontmp$first$83;
        long $ceylontmp$element$88 = $ceylontmp$first$83;
        boolean $ceylontmp$f$87 = false;
        loop_8: do {
            if ($ceylontmp$f$87 && $ceylontmp$step$90 == 1L) $ceylontmp$step$90 == 1 ? $ceylontmp$element$88 += $ceylontmp$incr$86 : ($ceylontmp$element$88 = .ceylon.language.Integer.neighbour($ceylontmp$element$88, $ceylontmp$incr$86));
            $ceylontmp$f$87 = true;
            i$89 = $ceylontmp$element$88;
            final long i = i$89;
            $ceylontmp$continue$82: do {
                .ceylon.language.print_.print(.ceylon.language.String.instance(new .java.lang.StringBuilder().append("body ").append(i).toString()));
            }             while (false);
            if ($ceylontmp$step$90 != 1L) $ceylontmp$step$90 == 1 ? $ceylontmp$element$88 += $ceylontmp$incr$86 : ($ceylontmp$element$88 = .ceylon.language.Integer.neighbour($ceylontmp$element$88, $ceylontmp$incr$86));
        }         while ($ceylontmp$step$90 == 1L ? $ceylontmp$step$90 == 1 ? $ceylontmp$increasing$85 ? i$89 - $ceylontmp$last$84 != 0L : i$89 - $ceylontmp$last$84 != 0L : $ceylontmp$increasing$85 ? .ceylon.language.Integer.offsetSign(i$89, $ceylontmp$last$84) <= 0L && .ceylon.language.Integer.offsetSign(i$89, $ceylontmp$first$83) >= 0L : .ceylon.language.Integer.offsetSign(i$89, $ceylontmp$last$84) >= 0L && .ceylon.language.Integer.offsetSign(i$89, $ceylontmp$first$83) <= 0L : $ceylontmp$step$90 == 1 ? $ceylontmp$increasing$85 ? $ceylontmp$element$88 - $ceylontmp$last$84 != 0L : $ceylontmp$element$88 - $ceylontmp$last$84 != 0L : $ceylontmp$increasing$85 ? .ceylon.language.Integer.offsetSign($ceylontmp$element$88, $ceylontmp$last$84) <= 0L && .ceylon.language.Integer.offsetSign($ceylontmp$element$88, $ceylontmp$first$83) >= 0L : .ceylon.language.Integer.offsetSign($ceylontmp$element$88, $ceylontmp$last$84) >= 0L && .ceylon.language.Integer.offsetSign($ceylontmp$element$88, $ceylontmp$first$83) <= 0L);
        .ceylon.language.print_.print(.ceylon.language.String.instance("else"));
    }
    
    private final void withElseAndExit$priv$() {
        boolean doforelse$91 = true;
        final long $ceylontmp$step$101 = getStep$priv$();
        if ($ceylontmp$step$101 <= 0) throw new .ceylon.language.AssertionError("Assertion failed" + ": step size must be greater than zero" + (.java.lang.System.lineSeparator() + "\tviolated " + "step > 0"));
        final long $ceylontmp$first$94 = getFirst$priv$();
        final long $ceylontmp$last$95 = getLast$priv$();
        final boolean $ceylontmp$increasing$96 = $ceylontmp$step$101 == 1 ? .ceylon.language.Integer.offset($ceylontmp$last$95, $ceylontmp$first$94) >= 0 : .ceylon.language.Integer.offsetSign($ceylontmp$last$95, $ceylontmp$first$94) >= 0;
        final long $ceylontmp$incr$97 = $ceylontmp$step$101 == 1 ? $ceylontmp$increasing$96 ? $ceylontmp$step$101 : -1L : $ceylontmp$increasing$96 ? $ceylontmp$step$101 : -$ceylontmp$step$101;
        long i$100 = $ceylontmp$first$94;
        long $ceylontmp$element$99 = $ceylontmp$first$94;
        boolean $ceylontmp$f$98 = false;
        loop_9: do {
            if ($ceylontmp$f$98 && $ceylontmp$step$101 == 1L) $ceylontmp$step$101 == 1 ? $ceylontmp$element$99 += $ceylontmp$incr$97 : ($ceylontmp$element$99 = .ceylon.language.Integer.neighbour($ceylontmp$element$99, $ceylontmp$incr$97));
            $ceylontmp$f$98 = true;
            i$100 = $ceylontmp$element$99;
            final long i = i$100;
            $ceylontmp$continue$93: do {
                if (getA$priv$()) {
                    doforelse$91 = false;
                    break loop_9;
                }
                .ceylon.language.print_.print(.ceylon.language.String.instance(new .java.lang.StringBuilder().append("body ").append(i).toString()));
            }             while (false);
            if ($ceylontmp$step$101 != 1L) $ceylontmp$step$101 == 1 ? $ceylontmp$element$99 += $ceylontmp$incr$97 : ($ceylontmp$element$99 = .ceylon.language.Integer.neighbour($ceylontmp$element$99, $ceylontmp$incr$97));
        }         while ($ceylontmp$step$101 == 1L ? $ceylontmp$step$101 == 1 ? $ceylontmp$increasing$96 ? i$100 - $ceylontmp$last$95 != 0L : i$100 - $ceylontmp$last$95 != 0L : $ceylontmp$increasing$96 ? .ceylon.language.Integer.offsetSign(i$100, $ceylontmp$last$95) <= 0L && .ceylon.language.Integer.offsetSign(i$100, $ceylontmp$first$94) >= 0L : .ceylon.language.Integer.offsetSign(i$100, $ceylontmp$last$95) >= 0L && .ceylon.language.Integer.offsetSign(i$100, $ceylontmp$first$94) <= 0L : $ceylontmp$step$101 == 1 ? $ceylontmp$increasing$96 ? $ceylontmp$element$99 - $ceylontmp$last$95 != 0L : $ceylontmp$element$99 - $ceylontmp$last$95 != 0L : $ceylontmp$increasing$96 ? .ceylon.language.Integer.offsetSign($ceylontmp$element$99, $ceylontmp$last$95) <= 0L && .ceylon.language.Integer.offsetSign($ceylontmp$element$99, $ceylontmp$first$94) >= 0L : .ceylon.language.Integer.offsetSign($ceylontmp$element$99, $ceylontmp$last$95) >= 0L && .ceylon.language.Integer.offsetSign($ceylontmp$element$99, $ceylontmp$first$94) <= 0L);
        if (doforelse$91) {
            .ceylon.language.print_.print(.ceylon.language.String.instance("else"));
        }
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.statement.loop.optim.IntegerSpansWithStep.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.statement.loop.optim.IntegerSpansWithStep.class);
}
class CharacterSpans implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    
    protected CharacterSpans() {
        super();
        this.first = 0;
        this.last = 0;
        this.a = false;
    }
    
    CharacterSpans(final int first, final int last) {
        this.first = first;
        this.last = last;
        this.a = ((.ceylon.language.Boolean)(.java.lang.Object).ceylon.language.nothing_.get_()).booleanValue();
    }
    private final int first;
    
    private final int getFirst$priv$() {
        return first;
    }
    private final int last;
    
    private final int getLast$priv$() {
        return last;
    }
    private final boolean a;
    
    private final boolean getA$priv$() {
        return a;
    }
    
    private final void simple$priv$() {
        final int $ceylontmp$first$105 = getFirst$priv$();
        final int $ceylontmp$last$106 = getLast$priv$();
        final boolean $ceylontmp$increasing$107 = .ceylon.language.Character.offset($ceylontmp$last$106, $ceylontmp$first$105) >= 0;
        boolean $ceylontmp$112 = .ceylon.language.Character.offsetSign($ceylontmp$first$105, .ceylon.language.Character.getSuccessor($ceylontmp$first$105)) > 0L && .ceylon.language.Character.offsetSign(.ceylon.language.Character.getPredecessor($ceylontmp$last$106), $ceylontmp$last$106) > 0L;
        final long $ceylontmp$incr$108 = $ceylontmp$increasing$107 ? 1 : -1;
        int i$111 = $ceylontmp$first$105;
        int $ceylontmp$element$110 = $ceylontmp$first$105;
        boolean $ceylontmp$f$109 = false;
        loop_10: do {
            if ($ceylontmp$f$109) $ceylontmp$element$110 = .ceylon.language.Character.neighbour($ceylontmp$element$110, $ceylontmp$incr$108);
            $ceylontmp$f$109 = true;
            i$111 = $ceylontmp$element$110;
            final int i = i$111;
            $ceylontmp$continue$104: do {
                .ceylon.language.print_.print(.ceylon.language.String.instance(new .java.lang.StringBuilder().append("body ").appendCodePoint(i).toString()));
            }             while (false);
        }         while ($ceylontmp$increasing$107 ? i$111 - $ceylontmp$last$106 != 0 : i$111 - $ceylontmp$last$106 != 0);
    }
    
    private final void withBreak$priv$() {
        final int $ceylontmp$first$115 = getFirst$priv$();
        final int $ceylontmp$last$116 = getLast$priv$();
        final boolean $ceylontmp$increasing$117 = .ceylon.language.Character.offset($ceylontmp$last$116, $ceylontmp$first$115) >= 0;
        boolean $ceylontmp$122 = .ceylon.language.Character.offsetSign($ceylontmp$first$115, .ceylon.language.Character.getSuccessor($ceylontmp$first$115)) > 0L && .ceylon.language.Character.offsetSign(.ceylon.language.Character.getPredecessor($ceylontmp$last$116), $ceylontmp$last$116) > 0L;
        final long $ceylontmp$incr$118 = $ceylontmp$increasing$117 ? 1 : -1;
        int i$121 = $ceylontmp$first$115;
        int $ceylontmp$element$120 = $ceylontmp$first$115;
        boolean $ceylontmp$f$119 = false;
        loop_11: do {
            if ($ceylontmp$f$119) $ceylontmp$element$120 = .ceylon.language.Character.neighbour($ceylontmp$element$120, $ceylontmp$incr$118);
            $ceylontmp$f$119 = true;
            i$121 = $ceylontmp$element$120;
            final int i = i$121;
            $ceylontmp$continue$114: do {
                if (getA$priv$()) {
                    break loop_11;
                }
                .ceylon.language.print_.print(.ceylon.language.String.instance(new .java.lang.StringBuilder().append("body ").appendCodePoint(i).toString()));
            }             while (false);
        }         while ($ceylontmp$increasing$117 ? i$121 - $ceylontmp$last$116 != 0 : i$121 - $ceylontmp$last$116 != 0);
    }
    
    private final void withContinue$priv$() {
        final int $ceylontmp$first$126 = getFirst$priv$();
        final int $ceylontmp$last$127 = getLast$priv$();
        final boolean $ceylontmp$increasing$128 = .ceylon.language.Character.offset($ceylontmp$last$127, $ceylontmp$first$126) >= 0;
        boolean $ceylontmp$133 = .ceylon.language.Character.offsetSign($ceylontmp$first$126, .ceylon.language.Character.getSuccessor($ceylontmp$first$126)) > 0L && .ceylon.language.Character.offsetSign(.ceylon.language.Character.getPredecessor($ceylontmp$last$127), $ceylontmp$last$127) > 0L;
        final long $ceylontmp$incr$129 = $ceylontmp$increasing$128 ? 1 : -1;
        int i$132 = $ceylontmp$first$126;
        int $ceylontmp$element$131 = $ceylontmp$first$126;
        boolean $ceylontmp$f$130 = false;
        loop_12: do {
            if ($ceylontmp$f$130) $ceylontmp$element$131 = .ceylon.language.Character.neighbour($ceylontmp$element$131, $ceylontmp$incr$129);
            $ceylontmp$f$130 = true;
            i$132 = $ceylontmp$element$131;
            final int i = i$132;
            $ceylontmp$continue$125: do {
                if (getA$priv$()) {
                    break $ceylontmp$continue$125;
                }
                .ceylon.language.print_.print(.ceylon.language.String.instance(new .java.lang.StringBuilder().append("body ").appendCodePoint(i).toString()));
            }             while (false);
        }         while ($ceylontmp$increasing$128 ? i$132 - $ceylontmp$last$127 != 0 : i$132 - $ceylontmp$last$127 != 0);
    }
    
    private final void withElseButNoExit$priv$() {
        final int $ceylontmp$first$137 = getFirst$priv$();
        final int $ceylontmp$last$138 = getLast$priv$();
        final boolean $ceylontmp$increasing$139 = .ceylon.language.Character.offset($ceylontmp$last$138, $ceylontmp$first$137) >= 0;
        boolean $ceylontmp$144 = .ceylon.language.Character.offsetSign($ceylontmp$first$137, .ceylon.language.Character.getSuccessor($ceylontmp$first$137)) > 0L && .ceylon.language.Character.offsetSign(.ceylon.language.Character.getPredecessor($ceylontmp$last$138), $ceylontmp$last$138) > 0L;
        final long $ceylontmp$incr$140 = $ceylontmp$increasing$139 ? 1 : -1;
        int i$143 = $ceylontmp$first$137;
        int $ceylontmp$element$142 = $ceylontmp$first$137;
        boolean $ceylontmp$f$141 = false;
        loop_13: do {
            if ($ceylontmp$f$141) $ceylontmp$element$142 = .ceylon.language.Character.neighbour($ceylontmp$element$142, $ceylontmp$incr$140);
            $ceylontmp$f$141 = true;
            i$143 = $ceylontmp$element$142;
            final int i = i$143;
            $ceylontmp$continue$136: do {
                .ceylon.language.print_.print(.ceylon.language.String.instance(new .java.lang.StringBuilder().append("body ").appendCodePoint(i).toString()));
            }             while (false);
        }         while ($ceylontmp$increasing$139 ? i$143 - $ceylontmp$last$138 != 0 : i$143 - $ceylontmp$last$138 != 0);
        .ceylon.language.print_.print(.ceylon.language.String.instance("else"));
    }
    
    private final void withElseAndExit$priv$() {
        boolean doforelse$145 = true;
        final int $ceylontmp$first$148 = getFirst$priv$();
        final int $ceylontmp$last$149 = getLast$priv$();
        final boolean $ceylontmp$increasing$150 = .ceylon.language.Character.offset($ceylontmp$last$149, $ceylontmp$first$148) >= 0;
        boolean $ceylontmp$155 = .ceylon.language.Character.offsetSign($ceylontmp$first$148, .ceylon.language.Character.getSuccessor($ceylontmp$first$148)) > 0L && .ceylon.language.Character.offsetSign(.ceylon.language.Character.getPredecessor($ceylontmp$last$149), $ceylontmp$last$149) > 0L;
        final long $ceylontmp$incr$151 = $ceylontmp$increasing$150 ? 1 : -1;
        int i$154 = $ceylontmp$first$148;
        int $ceylontmp$element$153 = $ceylontmp$first$148;
        boolean $ceylontmp$f$152 = false;
        loop_14: do {
            if ($ceylontmp$f$152) $ceylontmp$element$153 = .ceylon.language.Character.neighbour($ceylontmp$element$153, $ceylontmp$incr$151);
            $ceylontmp$f$152 = true;
            i$154 = $ceylontmp$element$153;
            final int i = i$154;
            $ceylontmp$continue$147: do {
                if (getA$priv$()) {
                    doforelse$145 = false;
                    break loop_14;
                }
                .ceylon.language.print_.print(.ceylon.language.String.instance(new .java.lang.StringBuilder().append("body ").appendCodePoint(i).toString()));
            }             while (false);
        }         while ($ceylontmp$increasing$150 ? i$154 - $ceylontmp$last$149 != 0 : i$154 - $ceylontmp$last$149 != 0);
        if (doforelse$145) {
            .ceylon.language.print_.print(.ceylon.language.String.instance("else"));
        }
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.statement.loop.optim.CharacterSpans.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.statement.loop.optim.CharacterSpans.class);
}
class CharacterSpansWithStep implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    
    protected CharacterSpansWithStep() {
        super();
        this.first = 0;
        this.last = 0;
        this.step = 0L;
        this.a = false;
    }
    
    CharacterSpansWithStep(final int first, final int last, final long step) {
        this.first = first;
        this.last = last;
        this.step = step;
        this.a = ((.ceylon.language.Boolean)(.java.lang.Object).ceylon.language.nothing_.get_()).booleanValue();
    }
    private final int first;
    
    private final int getFirst$priv$() {
        return first;
    }
    private final int last;
    
    private final int getLast$priv$() {
        return last;
    }
    private final long step;
    
    private final long getStep$priv$() {
        return step;
    }
    private final boolean a;
    
    private final boolean getA$priv$() {
        return a;
    }
    
    private final void simple$priv$() {
        final long $ceylontmp$step$166 = getStep$priv$();
        if ($ceylontmp$step$166 <= 0) throw new .ceylon.language.AssertionError("Assertion failed" + ": step size must be greater than zero" + (.java.lang.System.lineSeparator() + "\tviolated " + "step > 0"));
        final int $ceylontmp$first$159 = getFirst$priv$();
        final int $ceylontmp$last$160 = getLast$priv$();
        final boolean $ceylontmp$increasing$161 = $ceylontmp$step$166 == 1 ? .ceylon.language.Character.offset($ceylontmp$last$160, $ceylontmp$first$159) >= 0 : .ceylon.language.Character.offsetSign($ceylontmp$last$160, $ceylontmp$first$159) >= 0;
        boolean $ceylontmp$167 = .ceylon.language.Character.offsetSign($ceylontmp$first$159, .ceylon.language.Character.getSuccessor($ceylontmp$first$159)) > 0L && .ceylon.language.Character.offsetSign(.ceylon.language.Character.getPredecessor($ceylontmp$last$160), $ceylontmp$last$160) > 0L;
        final long $ceylontmp$incr$162 = $ceylontmp$step$166 == 1 ? $ceylontmp$increasing$161 ? $ceylontmp$step$166 : -1 : $ceylontmp$increasing$161 ? $ceylontmp$step$166 : -$ceylontmp$step$166;
        int i$165 = $ceylontmp$first$159;
        int $ceylontmp$element$164 = $ceylontmp$first$159;
        boolean $ceylontmp$f$163 = false;
        loop_15: do {
            if ($ceylontmp$f$163 && $ceylontmp$step$166 == 1L) $ceylontmp$step$166 == 1 ? $ceylontmp$element$164 = .ceylon.language.Character.neighbour($ceylontmp$element$164, $ceylontmp$incr$162) : ($ceylontmp$element$164 = .ceylon.language.Character.neighbour($ceylontmp$element$164, $ceylontmp$incr$162));
            $ceylontmp$f$163 = true;
            i$165 = $ceylontmp$element$164;
            final int i = i$165;
            $ceylontmp$continue$158: do {
                .ceylon.language.print_.print(.ceylon.language.String.instance(new .java.lang.StringBuilder().append("body ").appendCodePoint(i).toString()));
            }             while (false);
            if ($ceylontmp$step$166 != 1L) $ceylontmp$step$166 == 1 ? $ceylontmp$element$164 = .ceylon.language.Character.neighbour($ceylontmp$element$164, $ceylontmp$incr$162) : ($ceylontmp$element$164 = .ceylon.language.Character.neighbour($ceylontmp$element$164, $ceylontmp$incr$162));
        }         while ($ceylontmp$step$166 == 1L ? $ceylontmp$step$166 == 1 ? $ceylontmp$increasing$161 ? i$165 - $ceylontmp$last$160 != 0 : i$165 - $ceylontmp$last$160 != 0 : $ceylontmp$increasing$161 ? .ceylon.language.Character.offsetSign(i$165, $ceylontmp$last$160) <= 0 && .ceylon.language.Character.offsetSign(i$165, $ceylontmp$first$159) >= 0 : .ceylon.language.Character.offsetSign(i$165, $ceylontmp$last$160) >= 0 && .ceylon.language.Character.offsetSign(i$165, $ceylontmp$first$159) <= 0 : $ceylontmp$step$166 == 1 ? $ceylontmp$increasing$161 ? $ceylontmp$element$164 - $ceylontmp$last$160 != 0 : $ceylontmp$element$164 - $ceylontmp$last$160 != 0 : $ceylontmp$increasing$161 ? .ceylon.language.Character.offsetSign($ceylontmp$element$164, $ceylontmp$last$160) <= 0 && .ceylon.language.Character.offsetSign($ceylontmp$element$164, $ceylontmp$first$159) >= 0 : .ceylon.language.Character.offsetSign($ceylontmp$element$164, $ceylontmp$last$160) >= 0 && .ceylon.language.Character.offsetSign($ceylontmp$element$164, $ceylontmp$first$159) <= 0);
    }
    
    private final void withBreak$priv$() {
        final long $ceylontmp$step$177 = getStep$priv$();
        if ($ceylontmp$step$177 <= 0) throw new .ceylon.language.AssertionError("Assertion failed" + ": step size must be greater than zero" + (.java.lang.System.lineSeparator() + "\tviolated " + "step > 0"));
        final int $ceylontmp$first$170 = getFirst$priv$();
        final int $ceylontmp$last$171 = getLast$priv$();
        final boolean $ceylontmp$increasing$172 = $ceylontmp$step$177 == 1 ? .ceylon.language.Character.offset($ceylontmp$last$171, $ceylontmp$first$170) >= 0 : .ceylon.language.Character.offsetSign($ceylontmp$last$171, $ceylontmp$first$170) >= 0;
        boolean $ceylontmp$178 = .ceylon.language.Character.offsetSign($ceylontmp$first$170, .ceylon.language.Character.getSuccessor($ceylontmp$first$170)) > 0L && .ceylon.language.Character.offsetSign(.ceylon.language.Character.getPredecessor($ceylontmp$last$171), $ceylontmp$last$171) > 0L;
        final long $ceylontmp$incr$173 = $ceylontmp$step$177 == 1 ? $ceylontmp$increasing$172 ? $ceylontmp$step$177 : -1 : $ceylontmp$increasing$172 ? $ceylontmp$step$177 : -$ceylontmp$step$177;
        int i$176 = $ceylontmp$first$170;
        int $ceylontmp$element$175 = $ceylontmp$first$170;
        boolean $ceylontmp$f$174 = false;
        loop_16: do {
            if ($ceylontmp$f$174 && $ceylontmp$step$177 == 1L) $ceylontmp$step$177 == 1 ? $ceylontmp$element$175 = .ceylon.language.Character.neighbour($ceylontmp$element$175, $ceylontmp$incr$173) : ($ceylontmp$element$175 = .ceylon.language.Character.neighbour($ceylontmp$element$175, $ceylontmp$incr$173));
            $ceylontmp$f$174 = true;
            i$176 = $ceylontmp$element$175;
            final int i = i$176;
            $ceylontmp$continue$169: do {
                if (getA$priv$()) {
                    break loop_16;
                }
                .ceylon.language.print_.print(.ceylon.language.String.instance(new .java.lang.StringBuilder().append("body ").appendCodePoint(i).toString()));
            }             while (false);
            if ($ceylontmp$step$177 != 1L) $ceylontmp$step$177 == 1 ? $ceylontmp$element$175 = .ceylon.language.Character.neighbour($ceylontmp$element$175, $ceylontmp$incr$173) : ($ceylontmp$element$175 = .ceylon.language.Character.neighbour($ceylontmp$element$175, $ceylontmp$incr$173));
        }         while ($ceylontmp$step$177 == 1L ? $ceylontmp$step$177 == 1 ? $ceylontmp$increasing$172 ? i$176 - $ceylontmp$last$171 != 0 : i$176 - $ceylontmp$last$171 != 0 : $ceylontmp$increasing$172 ? .ceylon.language.Character.offsetSign(i$176, $ceylontmp$last$171) <= 0 && .ceylon.language.Character.offsetSign(i$176, $ceylontmp$first$170) >= 0 : .ceylon.language.Character.offsetSign(i$176, $ceylontmp$last$171) >= 0 && .ceylon.language.Character.offsetSign(i$176, $ceylontmp$first$170) <= 0 : $ceylontmp$step$177 == 1 ? $ceylontmp$increasing$172 ? $ceylontmp$element$175 - $ceylontmp$last$171 != 0 : $ceylontmp$element$175 - $ceylontmp$last$171 != 0 : $ceylontmp$increasing$172 ? .ceylon.language.Character.offsetSign($ceylontmp$element$175, $ceylontmp$last$171) <= 0 && .ceylon.language.Character.offsetSign($ceylontmp$element$175, $ceylontmp$first$170) >= 0 : .ceylon.language.Character.offsetSign($ceylontmp$element$175, $ceylontmp$last$171) >= 0 && .ceylon.language.Character.offsetSign($ceylontmp$element$175, $ceylontmp$first$170) <= 0);
    }
    
    private final void withContinue$priv$() {
        final long $ceylontmp$step$189 = getStep$priv$();
        if ($ceylontmp$step$189 <= 0) throw new .ceylon.language.AssertionError("Assertion failed" + ": step size must be greater than zero" + (.java.lang.System.lineSeparator() + "\tviolated " + "step > 0"));
        final int $ceylontmp$first$182 = getFirst$priv$();
        final int $ceylontmp$last$183 = getLast$priv$();
        final boolean $ceylontmp$increasing$184 = $ceylontmp$step$189 == 1 ? .ceylon.language.Character.offset($ceylontmp$last$183, $ceylontmp$first$182) >= 0 : .ceylon.language.Character.offsetSign($ceylontmp$last$183, $ceylontmp$first$182) >= 0;
        boolean $ceylontmp$190 = .ceylon.language.Character.offsetSign($ceylontmp$first$182, .ceylon.language.Character.getSuccessor($ceylontmp$first$182)) > 0L && .ceylon.language.Character.offsetSign(.ceylon.language.Character.getPredecessor($ceylontmp$last$183), $ceylontmp$last$183) > 0L;
        final long $ceylontmp$incr$185 = $ceylontmp$step$189 == 1 ? $ceylontmp$increasing$184 ? $ceylontmp$step$189 : -1 : $ceylontmp$increasing$184 ? $ceylontmp$step$189 : -$ceylontmp$step$189;
        int i$188 = $ceylontmp$first$182;
        int $ceylontmp$element$187 = $ceylontmp$first$182;
        boolean $ceylontmp$f$186 = false;
        loop_17: do {
            if ($ceylontmp$f$186 && $ceylontmp$step$189 == 1L) $ceylontmp$step$189 == 1 ? $ceylontmp$element$187 = .ceylon.language.Character.neighbour($ceylontmp$element$187, $ceylontmp$incr$185) : ($ceylontmp$element$187 = .ceylon.language.Character.neighbour($ceylontmp$element$187, $ceylontmp$incr$185));
            $ceylontmp$f$186 = true;
            i$188 = $ceylontmp$element$187;
            final int i = i$188;
            $ceylontmp$continue$181: do {
                if (getA$priv$()) {
                    break $ceylontmp$continue$181;
                }
                .ceylon.language.print_.print(.ceylon.language.String.instance(new .java.lang.StringBuilder().append("body ").appendCodePoint(i).toString()));
            }             while (false);
            if ($ceylontmp$step$189 != 1L) $ceylontmp$step$189 == 1 ? $ceylontmp$element$187 = .ceylon.language.Character.neighbour($ceylontmp$element$187, $ceylontmp$incr$185) : ($ceylontmp$element$187 = .ceylon.language.Character.neighbour($ceylontmp$element$187, $ceylontmp$incr$185));
        }         while ($ceylontmp$step$189 == 1L ? $ceylontmp$step$189 == 1 ? $ceylontmp$increasing$184 ? i$188 - $ceylontmp$last$183 != 0 : i$188 - $ceylontmp$last$183 != 0 : $ceylontmp$increasing$184 ? .ceylon.language.Character.offsetSign(i$188, $ceylontmp$last$183) <= 0 && .ceylon.language.Character.offsetSign(i$188, $ceylontmp$first$182) >= 0 : .ceylon.language.Character.offsetSign(i$188, $ceylontmp$last$183) >= 0 && .ceylon.language.Character.offsetSign(i$188, $ceylontmp$first$182) <= 0 : $ceylontmp$step$189 == 1 ? $ceylontmp$increasing$184 ? $ceylontmp$element$187 - $ceylontmp$last$183 != 0 : $ceylontmp$element$187 - $ceylontmp$last$183 != 0 : $ceylontmp$increasing$184 ? .ceylon.language.Character.offsetSign($ceylontmp$element$187, $ceylontmp$last$183) <= 0 && .ceylon.language.Character.offsetSign($ceylontmp$element$187, $ceylontmp$first$182) >= 0 : .ceylon.language.Character.offsetSign($ceylontmp$element$187, $ceylontmp$last$183) >= 0 && .ceylon.language.Character.offsetSign($ceylontmp$element$187, $ceylontmp$first$182) <= 0);
    }
    
    private final void withElseButNoExit$priv$() {
        final long $ceylontmp$step$201 = getStep$priv$();
        if ($ceylontmp$step$201 <= 0) throw new .ceylon.language.AssertionError("Assertion failed" + ": step size must be greater than zero" + (.java.lang.System.lineSeparator() + "\tviolated " + "step > 0"));
        final int $ceylontmp$first$194 = getFirst$priv$();
        final int $ceylontmp$last$195 = getLast$priv$();
        final boolean $ceylontmp$increasing$196 = $ceylontmp$step$201 == 1 ? .ceylon.language.Character.offset($ceylontmp$last$195, $ceylontmp$first$194) >= 0 : .ceylon.language.Character.offsetSign($ceylontmp$last$195, $ceylontmp$first$194) >= 0;
        boolean $ceylontmp$202 = .ceylon.language.Character.offsetSign($ceylontmp$first$194, .ceylon.language.Character.getSuccessor($ceylontmp$first$194)) > 0L && .ceylon.language.Character.offsetSign(.ceylon.language.Character.getPredecessor($ceylontmp$last$195), $ceylontmp$last$195) > 0L;
        final long $ceylontmp$incr$197 = $ceylontmp$step$201 == 1 ? $ceylontmp$increasing$196 ? $ceylontmp$step$201 : -1 : $ceylontmp$increasing$196 ? $ceylontmp$step$201 : -$ceylontmp$step$201;
        int i$200 = $ceylontmp$first$194;
        int $ceylontmp$element$199 = $ceylontmp$first$194;
        boolean $ceylontmp$f$198 = false;
        loop_18: do {
            if ($ceylontmp$f$198 && $ceylontmp$step$201 == 1L) $ceylontmp$step$201 == 1 ? $ceylontmp$element$199 = .ceylon.language.Character.neighbour($ceylontmp$element$199, $ceylontmp$incr$197) : ($ceylontmp$element$199 = .ceylon.language.Character.neighbour($ceylontmp$element$199, $ceylontmp$incr$197));
            $ceylontmp$f$198 = true;
            i$200 = $ceylontmp$element$199;
            final int i = i$200;
            $ceylontmp$continue$193: do {
                .ceylon.language.print_.print(.ceylon.language.String.instance(new .java.lang.StringBuilder().append("body ").appendCodePoint(i).toString()));
            }             while (false);
            if ($ceylontmp$step$201 != 1L) $ceylontmp$step$201 == 1 ? $ceylontmp$element$199 = .ceylon.language.Character.neighbour($ceylontmp$element$199, $ceylontmp$incr$197) : ($ceylontmp$element$199 = .ceylon.language.Character.neighbour($ceylontmp$element$199, $ceylontmp$incr$197));
        }         while ($ceylontmp$step$201 == 1L ? $ceylontmp$step$201 == 1 ? $ceylontmp$increasing$196 ? i$200 - $ceylontmp$last$195 != 0 : i$200 - $ceylontmp$last$195 != 0 : $ceylontmp$increasing$196 ? .ceylon.language.Character.offsetSign(i$200, $ceylontmp$last$195) <= 0 && .ceylon.language.Character.offsetSign(i$200, $ceylontmp$first$194) >= 0 : .ceylon.language.Character.offsetSign(i$200, $ceylontmp$last$195) >= 0 && .ceylon.language.Character.offsetSign(i$200, $ceylontmp$first$194) <= 0 : $ceylontmp$step$201 == 1 ? $ceylontmp$increasing$196 ? $ceylontmp$element$199 - $ceylontmp$last$195 != 0 : $ceylontmp$element$199 - $ceylontmp$last$195 != 0 : $ceylontmp$increasing$196 ? .ceylon.language.Character.offsetSign($ceylontmp$element$199, $ceylontmp$last$195) <= 0 && .ceylon.language.Character.offsetSign($ceylontmp$element$199, $ceylontmp$first$194) >= 0 : .ceylon.language.Character.offsetSign($ceylontmp$element$199, $ceylontmp$last$195) >= 0 && .ceylon.language.Character.offsetSign($ceylontmp$element$199, $ceylontmp$first$194) <= 0);
        .ceylon.language.print_.print(.ceylon.language.String.instance("else"));
    }
    
    private final void withElseAndExit$priv$() {
        boolean doforelse$203 = true;
        final long $ceylontmp$step$213 = getStep$priv$();
        if ($ceylontmp$step$213 <= 0) throw new .ceylon.language.AssertionError("Assertion failed" + ": step size must be greater than zero" + (.java.lang.System.lineSeparator() + "\tviolated " + "step > 0"));
        final int $ceylontmp$first$206 = getFirst$priv$();
        final int $ceylontmp$last$207 = getLast$priv$();
        final boolean $ceylontmp$increasing$208 = $ceylontmp$step$213 == 1 ? .ceylon.language.Character.offset($ceylontmp$last$207, $ceylontmp$first$206) >= 0 : .ceylon.language.Character.offsetSign($ceylontmp$last$207, $ceylontmp$first$206) >= 0;
        boolean $ceylontmp$214 = .ceylon.language.Character.offsetSign($ceylontmp$first$206, .ceylon.language.Character.getSuccessor($ceylontmp$first$206)) > 0L && .ceylon.language.Character.offsetSign(.ceylon.language.Character.getPredecessor($ceylontmp$last$207), $ceylontmp$last$207) > 0L;
        final long $ceylontmp$incr$209 = $ceylontmp$step$213 == 1 ? $ceylontmp$increasing$208 ? $ceylontmp$step$213 : -1 : $ceylontmp$increasing$208 ? $ceylontmp$step$213 : -$ceylontmp$step$213;
        int i$212 = $ceylontmp$first$206;
        int $ceylontmp$element$211 = $ceylontmp$first$206;
        boolean $ceylontmp$f$210 = false;
        loop_19: do {
            if ($ceylontmp$f$210 && $ceylontmp$step$213 == 1L) $ceylontmp$step$213 == 1 ? $ceylontmp$element$211 = .ceylon.language.Character.neighbour($ceylontmp$element$211, $ceylontmp$incr$209) : ($ceylontmp$element$211 = .ceylon.language.Character.neighbour($ceylontmp$element$211, $ceylontmp$incr$209));
            $ceylontmp$f$210 = true;
            i$212 = $ceylontmp$element$211;
            final int i = i$212;
            $ceylontmp$continue$205: do {
                if (getA$priv$()) {
                    doforelse$203 = false;
                    break loop_19;
                }
                .ceylon.language.print_.print(.ceylon.language.String.instance(new .java.lang.StringBuilder().append("body ").appendCodePoint(i).toString()));
            }             while (false);
            if ($ceylontmp$step$213 != 1L) $ceylontmp$step$213 == 1 ? $ceylontmp$element$211 = .ceylon.language.Character.neighbour($ceylontmp$element$211, $ceylontmp$incr$209) : ($ceylontmp$element$211 = .ceylon.language.Character.neighbour($ceylontmp$element$211, $ceylontmp$incr$209));
        }         while ($ceylontmp$step$213 == 1L ? $ceylontmp$step$213 == 1 ? $ceylontmp$increasing$208 ? i$212 - $ceylontmp$last$207 != 0 : i$212 - $ceylontmp$last$207 != 0 : $ceylontmp$increasing$208 ? .ceylon.language.Character.offsetSign(i$212, $ceylontmp$last$207) <= 0 && .ceylon.language.Character.offsetSign(i$212, $ceylontmp$first$206) >= 0 : .ceylon.language.Character.offsetSign(i$212, $ceylontmp$last$207) >= 0 && .ceylon.language.Character.offsetSign(i$212, $ceylontmp$first$206) <= 0 : $ceylontmp$step$213 == 1 ? $ceylontmp$increasing$208 ? $ceylontmp$element$211 - $ceylontmp$last$207 != 0 : $ceylontmp$element$211 - $ceylontmp$last$207 != 0 : $ceylontmp$increasing$208 ? .ceylon.language.Character.offsetSign($ceylontmp$element$211, $ceylontmp$last$207) <= 0 && .ceylon.language.Character.offsetSign($ceylontmp$element$211, $ceylontmp$first$206) >= 0 : .ceylon.language.Character.offsetSign($ceylontmp$element$211, $ceylontmp$last$207) >= 0 && .ceylon.language.Character.offsetSign($ceylontmp$element$211, $ceylontmp$first$206) <= 0);
        if (doforelse$203) {
            .ceylon.language.print_.print(.ceylon.language.String.instance("else"));
        }
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.statement.loop.optim.CharacterSpansWithStep.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.statement.loop.optim.CharacterSpansWithStep.class);
}