package com.redhat.ceylon.compiler.java.test.statement.loop.optim;

class ArrayIterationStatic implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    
    ArrayIterationStatic() {
    }
    
    private final void arrayOfIntegers$priv$(final .ceylon.language.Array<.ceylon.language.Integer> array) {
        final .java.lang.Object array$1 = array.toArray();
        final int length$2 = .com.redhat.ceylon.compiler.java.Util.arrayLength(array$1);
        loop_0: for (int i$3 = 0; i$3 < length$2; i$3++) {
            final long element = .com.redhat.ceylon.compiler.java.Util.getIntegerArray(array$1, i$3);
            .ceylon.language.print_.print(.ceylon.language.Integer.instance(element + 5L));
        }
    }
    
    private final void arrayOfIntegersBy$priv$(final .ceylon.language.Array<.ceylon.language.Integer> array) {
        final .java.lang.Object array$6 = array.toArray();
        final int length$7 = .com.redhat.ceylon.compiler.java.Util.arrayLength(array$6);
        final int step$5 = .com.redhat.ceylon.compiler.java.Util.toInt(5L);
        if (step$5 <= 0) throw new .ceylon.language.AssertionError("Assertion failed" + ": step size must be greater than zero" + (.java.lang.System.lineSeparator() + "\tviolated " + "step > 0"));
        loop_1: for (int i$8 = 0; i$8 < length$7; i$8 += step$5) {
            final long element = .com.redhat.ceylon.compiler.java.Util.getIntegerArray(array$6, i$8);
            .ceylon.language.print_.print(.ceylon.language.Integer.instance(element + 5L));
        }
    }
    
    private final void arrayOfIntegersDisabled$priv$(final .ceylon.language.Array<.ceylon.language.Integer> array) {
        .java.lang.Object elem$10;
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> element$iterator$$11 = array.iterator();
        loop_2: while (!((elem$10 = element$iterator$$11.next()) instanceof .ceylon.language.Finished)) {
            final long element = ((.ceylon.language.Integer)elem$10).longValue();
            .ceylon.language.print_.print(.ceylon.language.Integer.instance(element + 5L));
        }
        .java.lang.Object elem$13;
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> element$iterator$$14 = array.iterator();
        loop_3: while (!((elem$13 = element$iterator$$14.next()) instanceof .ceylon.language.Finished)) {
            final long element = ((.ceylon.language.Integer)elem$13).longValue();
            .ceylon.language.print_.print(.ceylon.language.Integer.instance(element + 5L));
        }
    }
    
    private final void arrayOfCharacters$priv$(final .ceylon.language.Array<.ceylon.language.Character> array) {
        final .java.lang.Object array$16 = array.toArray();
        final int length$17 = .com.redhat.ceylon.compiler.java.Util.arrayLength(array$16);
        loop_4: for (int i$18 = 0; i$18 < length$17; i$18++) {
            final int element = .com.redhat.ceylon.compiler.java.Util.getCharacterArray(array$16, i$18);
            .ceylon.language.print_.print(.ceylon.language.Character.instance(element));
        }
    }
    
    private final void arrayOfStrings$priv$(final .ceylon.language.Array<.ceylon.language.String> array) {
        final .java.lang.Object array$20 = array.toArray();
        final int length$21 = .com.redhat.ceylon.compiler.java.Util.arrayLength(array$20);
        loop_5: for (int i$22 = 0; i$22 < length$21; i$22++) {
            final .java.lang.String element = .com.redhat.ceylon.compiler.java.Util.getStringArray(array$20, i$22);
            .ceylon.language.print_.print(.ceylon.language.String.instance(element));
        }
    }
    
    private final void arrayOfObjects$priv$(final .ceylon.language.Array<.java.lang.Object> array) {
        final .ceylon.language.Array<.java.lang.Object> array$24 = array;
        final int length$25 = (int)array$24.getSize();
        loop_6: for (int i$26 = 0; i$26 < length$25; i$26++) {
            final .java.lang.Object element = array$24.unsafeItem(i$26);
            .ceylon.language.print_.print(element);
        }
    }
    
    private final void arrayOfIntegersWithBreak$priv$(final .ceylon.language.Array<.ceylon.language.Integer> array) {
        boolean doforelse$27 = true;
        final .java.lang.Object array$29 = array.toArray();
        final int length$30 = .com.redhat.ceylon.compiler.java.Util.arrayLength(array$29);
        loop_7: for (int i$31 = 0; i$31 < length$30; i$31++) {
            final long element = .com.redhat.ceylon.compiler.java.Util.getIntegerArray(array$29, i$31);
            
            final class x_ {
                
                private x_() {
                }
                
                long x() {
                    return element + 10L;
                }
            }
            final x_ x = new x_();
            if (element == 10L) {
                doforelse$27 = false;
                break loop_7;
            }
        }
        if (doforelse$27) {
            .ceylon.language.print_.print(.ceylon.language.String.instance("foo"));
        }
    }
    
    private final void keyValue$priv$(final .ceylon.language.Array<.ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .ceylon.language.Float>> array) {
        final .ceylon.language.Array<.ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .ceylon.language.Float>> array$34 = array;
        final int length$35 = (int)array$34.getSize();
        loop_8: for (int i$36 = 0; i$36 < length$35; i$36++) {
            final .ceylon.language.Entry entry$37 = (.ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .ceylon.language.Float>)(.ceylon.language.Entry)array$34.unsafeItem(i$36);
            final long i = ((.ceylon.language.Integer)entry$37.getKey()).longValue();
            final double f = ((.ceylon.language.Float)entry$37.getItem()).doubleValue();
            .ceylon.language.print_.print(.ceylon.language.Float.instance(i + f));
        }
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.statement.loop.optim.ArrayIterationStatic.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.statement.loop.optim.ArrayIterationStatic.class);
}