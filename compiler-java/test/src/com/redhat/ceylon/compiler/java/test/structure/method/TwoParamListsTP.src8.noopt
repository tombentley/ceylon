package com.redhat.ceylon.compiler.java.test.structure.method;

final class twoParamListsTP_ {
    
    private twoParamListsTP_() {
    }
    
    static <T extends .ceylon.language.Enumerable<T> & .ceylon.language.Invertible<T>>.ceylon.language.Callable<? extends .java.lang.Object> twoParamListsTP(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, final .java.lang.String name) {
        return new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, $reified$T), "Anything(T)", (short)-1){
            
            @.java.lang.Override
            public .java.lang.Object $call$(final .java.lang.Object $param$0) {
                final T i = (T)$param$0;
                boolean loopentered$0 = false;
                .java.lang.Object elem$1;
                .ceylon.language.Iterator<? extends T> x$iterator$$2 = .ceylon.language.span_.<T>span($reified$T, ((.ceylon.language.Invertible<T>)(.ceylon.language.Invertible)i).getNegated(), (T)i).iterator();
                loop_0: while (!((elem$1 = x$iterator$$2.next()) instanceof .ceylon.language.Finished)) {
                    loopentered$0 = true;
                    final T x = (T)elem$1;
                    .ceylon.language.print_.print(.ceylon.language.String.instance("hello " + name));
                }
                if (!loopentered$0) throw new .ceylon.language.AssertionError("nonempty Iterable with initial \'finished\' element");
                return null;
            }
        };
    }
}
final class twoParamListsTP_simple_ {
    
    private twoParamListsTP_simple_() {
    }
    
    static <T extends .ceylon.language.Ordinal<? extends T>>.ceylon.language.Callable<? extends .java.lang.Object> twoParamListsTP_simple(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, final .java.lang.String name) {
        return new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, $reified$T), "Anything(T)", (short)-1){
            
            @.java.lang.Override
            public .java.lang.Object $call$(final .java.lang.Object $param$0) {
                final T i = (T)$param$0;
                return null;
            }
        };
    }
}