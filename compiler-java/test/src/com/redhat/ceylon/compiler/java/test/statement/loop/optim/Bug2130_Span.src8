package com.redhat.ceylon.compiler.java.test.statement.loop.optim;

@.com.redhat.ceylon.compiler.java.metadata.Ceylon(
        major = 8,
        minor = 1)
@.com.redhat.ceylon.compiler.java.metadata.Method
final class compareSpanInteger2130_ {
    
    private compareSpanInteger2130_() {
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    static void compareSpanInteger2130(final long start, final long end) {
        (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.Integer> $ceylontmp$expect$53 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanInteger2130_.compareSpanInteger2130$expect(start, end);
                .ceylon.language.Integer $ceylontmp$breakAfter$54 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanInteger2130_.compareSpanInteger2130$breakAfter(start, end, $ceylontmp$expect$53);
                compareSpanInteger2130(start, end, $ceylontmp$expect$53, $ceylontmp$breakAfter$54);
            }
            returning null;
        );
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static final .ceylon.language.Sequential<? extends .ceylon.language.Integer> compareSpanInteger2130$expect(final long start, final long end) {
        return null;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    static void compareSpanInteger2130(final long start, final long end, final .ceylon.language.Sequential<? extends .ceylon.language.Integer> expect) {
        (
            let
            {
                .ceylon.language.Integer $ceylontmp$breakAfter$55 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanInteger2130_.compareSpanInteger2130$breakAfter(start, end, expect);
                compareSpanInteger2130(start, end, expect, $ceylontmp$breakAfter$55);
            }
            returning null;
        );
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static final .ceylon.language.Integer compareSpanInteger2130$breakAfter(final long start, final long end, final .ceylon.language.Sequential<? extends .ceylon.language.Integer> expect) {
        return null;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Anything")
    static void compareSpanInteger2130(@.com.redhat.ceylon.compiler.java.metadata.Name("start")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    final long start, @.com.redhat.ceylon.compiler.java.metadata.Name("end")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    final long end, @.com.redhat.ceylon.compiler.java.metadata.Name("expect")
    @.com.redhat.ceylon.compiler.java.metadata.Defaulted
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer[]?")
    final .ceylon.language.Sequential<? extends .ceylon.language.Integer> expect, @.com.redhat.ceylon.compiler.java.metadata.Name("breakAfter")
    @.com.redhat.ceylon.compiler.java.metadata.Defaulted
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer?")
    final .ceylon.language.Integer breakAfter) {
        final VariableBox<.ceylon.language.Sequential<? extends .ceylon.language.String>> problems = new VariableBox<.ceylon.language.Sequential<? extends .ceylon.language.String>>((.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential).ceylon.language.empty_.get_());
        final .com.redhat.ceylon.compiler.java.language.VariableBoxLong index = new .com.redhat.ceylon.compiler.java.language.VariableBoxLong(0L);
        final .com.redhat.ceylon.compiler.java.language.VariableBoxLong ss = new .com.redhat.ceylon.compiler.java.language.VariableBoxLong(0L);
        .java.lang.Throwable t1 = null;
        try {
            boolean loopentered$0 = false;
            .java.lang.Object elem$1;
            .ceylon.language.Iterator<? extends .ceylon.language.Integer> i$iterator$$2 = .ceylon.language.span_.<.ceylon.language.Integer>span(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(start), .ceylon.language.Integer.instance(end)).iterator();
            loop_0: while (!((elem$1 = i$iterator$$2.next()) instanceof .ceylon.language.Finished)) {
                loopentered$0 = true;
                final long i = ((.ceylon.language.Integer)elem$1).longValue();
                (
                    let
                    {
                        long $ceylontmp$op$3 = ss.ref + (
                            let
                            {
                                long base$4 = i;
                            }
                            returning base$4 * base$4;
                        );
                        ss.ref = $ceylontmp$op$3;
                    }
                    returning $ceylontmp$op$3;
                );
                .ceylon.language.Sequential<? extends .ceylon.language.Integer> expect$6;
                if ((expect$6 = expect) != null) {
                    final .ceylon.language.Sequential<? extends .ceylon.language.Integer> expect$7 = expect$6;
                    .ceylon.language.Integer expected$9;
                    if ((expected$9 = expect$7.getFromFirst(index.ref)) != null) {
                        final long expected$10 = expected$9.longValue();
                        if (!(i == expected$10)) {
                            problems.ref = (.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance(new .java.lang.StringBuilder().append("iterated over unexpected element on index ").append(index.ref).append(": got ").append(i).append(" expected ").append(expected$10).toString())}, problems.ref);
                        }
                    } else {
                        problems.ref = (.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance(new .java.lang.StringBuilder().append("more iterations than expected: expected ").append(expect$7.getSize()).append(" iterations, but index ").append(index.ref).append(" had value ").append(i).toString())}, problems.ref);
                    }
                }
                .ceylon.language.Integer breakAfter$13;
                if ((breakAfter$13 = breakAfter) != null) {
                    final long breakAfter$14 = breakAfter$13.longValue();
                    if (index.ref >= breakAfter$14) {
                        break loop_0;
                    }
                }
                (
                    let
                    {
                        long $ceylontmp$op$15 = index.ref;
                        index.ref = $ceylontmp$op$15 + 1;
                    }
                    returning $ceylontmp$op$15;
                );
            }
            if (!loopentered$0) throw new .ceylon.language.AssertionError("nonempty Iterable with initial \'finished\' element");
        } catch (final .java.lang.Throwable t) {
            t1 = t;
        }
        final .com.redhat.ceylon.compiler.java.language.VariableBoxLong index2 = new .com.redhat.ceylon.compiler.java.language.VariableBoxLong(0L);
        final .com.redhat.ceylon.compiler.java.language.VariableBoxLong ss2 = new .com.redhat.ceylon.compiler.java.language.VariableBoxLong(0L);
        .java.lang.Throwable t2 = null;
        try {
            final long $ceylontmp$first$18 = start;
            final long $ceylontmp$last$19 = end;
            final boolean $ceylontmp$increasing$20 = .ceylon.language.Integer.offset($ceylontmp$last$19, $ceylontmp$first$18) >= 0;
            final long $ceylontmp$incr$21 = $ceylontmp$increasing$20 ? 1L : -1L;
            long i$24 = $ceylontmp$first$18;
            long $ceylontmp$element$23 = $ceylontmp$first$18;
            boolean $ceylontmp$f$22 = false;
            loop_1: do {
                if ($ceylontmp$f$22) $ceylontmp$element$23 += $ceylontmp$incr$21;
                $ceylontmp$f$22 = true;
                i$24 = $ceylontmp$element$23;
                final long i = i$24;
                $ceylontmp$continue$17: do {
                    (
                        let
                        {
                            long $ceylontmp$op$25 = ss2.ref + (
                                let
                                {
                                    long base$26 = i;
                                }
                                returning base$26 * base$26;
                            );
                            ss2.ref = $ceylontmp$op$25;
                        }
                        returning $ceylontmp$op$25;
                    );
                    .ceylon.language.Sequential<? extends .ceylon.language.Integer> expect$28;
                    if ((expect$28 = expect) != null) {
                        final .ceylon.language.Sequential<? extends .ceylon.language.Integer> expect$29 = expect$28;
                        .ceylon.language.Integer expected$31;
                        if ((expected$31 = expect$29.getFromFirst(index2.ref)) != null) {
                            final long expected$32 = expected$31.longValue();
                            if (!(i == expected$32)) {
                                problems.ref = (.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance(new .java.lang.StringBuilder().append("iterated over unexpected element on index ").append(index2.ref).append(": got ").append(i).append(" expected ").append(expected$32).toString())}, problems.ref);
                            }
                        } else {
                            problems.ref = (.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance(new .java.lang.StringBuilder().append("more iterations than expected: expected ").append(expect$29.getSize()).append(" iterations, but index ").append(index2.ref).append(" had value ").append(i).toString())}, problems.ref);
                        }
                    }
                    .ceylon.language.Integer breakAfter$35;
                    if ((breakAfter$35 = breakAfter) != null) {
                        final long breakAfter$36 = breakAfter$35.longValue();
                        if (index2.ref >= breakAfter$36) {
                            break loop_1;
                        }
                    }
                    (
                        let
                        {
                            long $ceylontmp$op$37 = index2.ref;
                            index2.ref = $ceylontmp$op$37 + 1;
                        }
                        returning $ceylontmp$op$37;
                    );
                }                 while (false);
            }             while ($ceylontmp$increasing$20 ? i$24 - $ceylontmp$last$19 != 0L : i$24 - $ceylontmp$last$19 != 0L);
        } catch (final .java.lang.Throwable t) {
            t2 = t;
        }
        if (!(index.ref == index2.ref)) {
            problems.ref = (.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance(new .java.lang.StringBuilder().append("different number of iterations: expected ").append(index.ref).append(" but was ").append(index2.ref).toString())}, problems.ref);
        }
        if (!(ss.ref == ss2.ref)) {
            problems.ref = (.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance(new .java.lang.StringBuilder().append("different sums: expected ").append(ss.ref).append(" but was ").append(ss2.ref).toString())}, problems.ref);
        }
        .java.lang.Throwable got1$41;
        if ((got1$41 = t1) != null) {
            final .java.lang.Throwable got1$45 = got1$41;
            .java.lang.Throwable got2$47;
            if ((got2$47 = t2) != null) {
                final .java.lang.Throwable got2$48 = got2$47;
                if (!.ceylon.language.meta.type_.<.java.lang.Throwable>type(.ceylon.language.Throwable.$TypeDescriptor$, got1$45).equals(.ceylon.language.meta.type_.<.java.lang.Throwable>type(.ceylon.language.Throwable.$TypeDescriptor$, got2$48))) {
                    problems.ref = (.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance(new .java.lang.StringBuilder().append("different exception types: expected ").append(.ceylon.language.meta.type_.<.java.lang.Throwable>type(.ceylon.language.Throwable.$TypeDescriptor$, got1$45).toString()).append(" but got ").append(.ceylon.language.meta.type_.<.java.lang.Throwable>type(.ceylon.language.Throwable.$TypeDescriptor$, got2$48).toString()).toString())}, problems.ref);
                }
                if (!.com.redhat.ceylon.compiler.java.Util.throwableMessage(got1$45).equals(.com.redhat.ceylon.compiler.java.Util.throwableMessage(got2$48))) {
                }
            } else {
                problems.ref = (.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance(new .java.lang.StringBuilder().append("unoptimized threw ").append(got1$45.toString()).append(", but optimized ran normally").toString())}, problems.ref);
            }
        } else {
            .java.lang.Throwable got2$43;
            if ((got2$43 = t2) != null) {
                final .java.lang.Throwable got2$44 = got2$43;
                problems.ref = (.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance(new .java.lang.StringBuilder().append("optimized threw ").append(got2$44.toString()).append(", but unoptimized ran normally").toString())}, problems.ref);
            }
        }
        if ((
            let
            {
                .java.lang.Object $ceylontmp$52 = problems.ref;
            }
            returning $ceylontmp$52 instanceof .ceylon.language.Sequence;
        )) {
            throw new .ceylon.language.Exception(.ceylon.language.String.instance(new .java.lang.StringBuilder().append("(").append(start).append("..").append(end).append("): ").append(problems.ref.toString()).toString()));
        }
    }
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(
        major = 8,
        minor = 1)
@.com.redhat.ceylon.compiler.java.metadata.Method
final class compareSpanIntegerBy2130_ {
    
    private compareSpanIntegerBy2130_() {
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    static void compareSpanIntegerBy2130(final long start, final long end, final long by) {
        (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.Integer> $ceylontmp$expect$112 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanIntegerBy2130_.compareSpanIntegerBy2130$expect(start, end, by);
                .ceylon.language.Integer $ceylontmp$breakAfter$113 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanIntegerBy2130_.compareSpanIntegerBy2130$breakAfter(start, end, by, $ceylontmp$expect$112);
                boolean $ceylontmp$debug$114 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanIntegerBy2130_.compareSpanIntegerBy2130$debug(start, end, by, $ceylontmp$expect$112, $ceylontmp$breakAfter$113);
                compareSpanIntegerBy2130(start, end, by, $ceylontmp$expect$112, $ceylontmp$breakAfter$113, $ceylontmp$debug$114);
            }
            returning null;
        );
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static final .ceylon.language.Sequential<? extends .ceylon.language.Integer> compareSpanIntegerBy2130$expect(final long start, final long end, final long by) {
        return null;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    static void compareSpanIntegerBy2130(final long start, final long end, final long by, final .ceylon.language.Sequential<? extends .ceylon.language.Integer> expect) {
        (
            let
            {
                .ceylon.language.Integer $ceylontmp$breakAfter$115 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanIntegerBy2130_.compareSpanIntegerBy2130$breakAfter(start, end, by, expect);
                boolean $ceylontmp$debug$116 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanIntegerBy2130_.compareSpanIntegerBy2130$debug(start, end, by, expect, $ceylontmp$breakAfter$115);
                compareSpanIntegerBy2130(start, end, by, expect, $ceylontmp$breakAfter$115, $ceylontmp$debug$116);
            }
            returning null;
        );
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static final .ceylon.language.Integer compareSpanIntegerBy2130$breakAfter(final long start, final long end, final long by, final .ceylon.language.Sequential<? extends .ceylon.language.Integer> expect) {
        return null;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    static void compareSpanIntegerBy2130(final long start, final long end, final long by, final .ceylon.language.Sequential<? extends .ceylon.language.Integer> expect, final .ceylon.language.Integer breakAfter) {
        (
            let
            {
                boolean $ceylontmp$debug$117 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanIntegerBy2130_.compareSpanIntegerBy2130$debug(start, end, by, expect, breakAfter);
                compareSpanIntegerBy2130(start, end, by, expect, breakAfter, $ceylontmp$debug$117);
            }
            returning null;
        );
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static final boolean compareSpanIntegerBy2130$debug(final long start, final long end, final long by, final .ceylon.language.Sequential<? extends .ceylon.language.Integer> expect, final .ceylon.language.Integer breakAfter) {
        return false;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Anything")
    static void compareSpanIntegerBy2130(@.com.redhat.ceylon.compiler.java.metadata.Name("start")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    final long start, @.com.redhat.ceylon.compiler.java.metadata.Name("end")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    final long end, @.com.redhat.ceylon.compiler.java.metadata.Name("by")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    final long by, @.com.redhat.ceylon.compiler.java.metadata.Name("expect")
    @.com.redhat.ceylon.compiler.java.metadata.Defaulted
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer[]?")
    final .ceylon.language.Sequential<? extends .ceylon.language.Integer> expect, @.com.redhat.ceylon.compiler.java.metadata.Name("breakAfter")
    @.com.redhat.ceylon.compiler.java.metadata.Defaulted
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer?")
    final .ceylon.language.Integer breakAfter, @.com.redhat.ceylon.compiler.java.metadata.Name("debug")
    @.com.redhat.ceylon.compiler.java.metadata.Defaulted
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Boolean")
    final boolean debug) {
        final VariableBox<.ceylon.language.Sequential<? extends .ceylon.language.String>> problems = new VariableBox<.ceylon.language.Sequential<? extends .ceylon.language.String>>((.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential).ceylon.language.empty_.get_());
        final .com.redhat.ceylon.compiler.java.language.VariableBoxLong index = new .com.redhat.ceylon.compiler.java.language.VariableBoxLong(0L);
        final .com.redhat.ceylon.compiler.java.language.VariableBoxLong ss = new .com.redhat.ceylon.compiler.java.language.VariableBoxLong(0L);
        .java.lang.Throwable t1 = null;
        try {
            boolean loopentered$56 = false;
            .java.lang.Object elem$57;
            .ceylon.language.Iterator<? extends .ceylon.language.Integer> i$iterator$$58 = .ceylon.language.span_.<.ceylon.language.Integer>span(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(start), .ceylon.language.Integer.instance(end)).by(by).iterator();
            loop_2: while (!((elem$57 = i$iterator$$58.next()) instanceof .ceylon.language.Finished)) {
                loopentered$56 = true;
                final long i = ((.ceylon.language.Integer)elem$57).longValue();
                if (debug) {
                    .ceylon.language.print_.print(.ceylon.language.String.instance(new .java.lang.StringBuilder().append("unoptimized (").append(start).append("..").append(end).append(").by(").append(by).append(")[").append(index.ref).append("]: ").append(i).toString()));
                }
                (
                    let
                    {
                        long $ceylontmp$op$60 = ss.ref + (
                            let
                            {
                                long base$61 = i;
                            }
                            returning base$61 * base$61;
                        );
                        ss.ref = $ceylontmp$op$60;
                    }
                    returning $ceylontmp$op$60;
                );
                .ceylon.language.Sequential<? extends .ceylon.language.Integer> expect$63;
                if ((expect$63 = expect) != null) {
                    final .ceylon.language.Sequential<? extends .ceylon.language.Integer> expect$64 = expect$63;
                    .ceylon.language.Integer expected$66;
                    if ((expected$66 = expect$64.getFromFirst(index.ref)) != null) {
                        final long expected$67 = expected$66.longValue();
                        if (!(i == expected$67)) {
                            problems.ref = (.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance(new .java.lang.StringBuilder().append("iterated over unexpected element on index ").append(index.ref).append(": got ").append(i).append(" expected ").append(expected$67).toString())}, problems.ref);
                        }
                    } else {
                        problems.ref = (.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance(new .java.lang.StringBuilder().append("more iterations than expected: expected ").append(expect$64.getSize()).append(" iterations, but index ").append(index.ref).append(" had value ").append(i).toString())}, problems.ref);
                    }
                }
                .ceylon.language.Integer breakAfter$70;
                if ((breakAfter$70 = breakAfter) != null) {
                    final long breakAfter$71 = breakAfter$70.longValue();
                    if (index.ref >= breakAfter$71) {
                        break loop_2;
                    }
                }
                (
                    let
                    {
                        long $ceylontmp$op$72 = index.ref;
                        index.ref = $ceylontmp$op$72 + 1;
                    }
                    returning $ceylontmp$op$72;
                );
            }
            if (!loopentered$56) throw new .ceylon.language.AssertionError("nonempty Iterable with initial \'finished\' element");
        } catch (final .java.lang.Throwable t) {
            t1 = t;
        }
        final .com.redhat.ceylon.compiler.java.language.VariableBoxLong index2 = new .com.redhat.ceylon.compiler.java.language.VariableBoxLong(0L);
        final .com.redhat.ceylon.compiler.java.language.VariableBoxLong ss2 = new .com.redhat.ceylon.compiler.java.language.VariableBoxLong(0L);
        .java.lang.Throwable t2 = null;
        try {
            final long $ceylontmp$step$82 = by;
            if ($ceylontmp$step$82 <= 0) throw new .ceylon.language.AssertionError("Assertion failed" + ": step size must be greater than zero" + (.java.lang.System.lineSeparator() + "\tviolated " + "step > 0"));
            final long $ceylontmp$first$75 = start;
            final long $ceylontmp$last$76 = end;
            final boolean $ceylontmp$increasing$77 = $ceylontmp$step$82 == 1 ? .ceylon.language.Integer.offset($ceylontmp$last$76, $ceylontmp$first$75) >= 0 : .ceylon.language.Integer.offsetSign($ceylontmp$last$76, $ceylontmp$first$75) >= 0;
            final long $ceylontmp$incr$78 = $ceylontmp$step$82 == 1 ? $ceylontmp$increasing$77 ? $ceylontmp$step$82 : -1L : $ceylontmp$increasing$77 ? $ceylontmp$step$82 : -$ceylontmp$step$82;
            long i$81 = $ceylontmp$first$75;
            long $ceylontmp$element$80 = $ceylontmp$first$75;
            boolean $ceylontmp$f$79 = false;
            loop_3: do {
                if ($ceylontmp$f$79 && $ceylontmp$step$82 == 1L) $ceylontmp$step$82 == 1 ? $ceylontmp$element$80 += $ceylontmp$incr$78 : ($ceylontmp$element$80 = .ceylon.language.Integer.neighbour($ceylontmp$element$80, $ceylontmp$incr$78));
                $ceylontmp$f$79 = true;
                i$81 = $ceylontmp$element$80;
                final long i = i$81;
                $ceylontmp$continue$74: do {
                    if (debug) {
                        .ceylon.language.print_.print(.ceylon.language.String.instance(new .java.lang.StringBuilder().append("optimized (").append(start).append("..").append(end).append(").by(").append(by).append(")[").append(index.ref).append("]: ").append(i).toString()));
                    }
                    (
                        let
                        {
                            long $ceylontmp$op$84 = ss2.ref + (
                                let
                                {
                                    long base$85 = i;
                                }
                                returning base$85 * base$85;
                            );
                            ss2.ref = $ceylontmp$op$84;
                        }
                        returning $ceylontmp$op$84;
                    );
                    .ceylon.language.Sequential<? extends .ceylon.language.Integer> expect$87;
                    if ((expect$87 = expect) != null) {
                        final .ceylon.language.Sequential<? extends .ceylon.language.Integer> expect$88 = expect$87;
                        .ceylon.language.Integer expected$90;
                        if ((expected$90 = expect$88.getFromFirst(index2.ref)) != null) {
                            final long expected$91 = expected$90.longValue();
                            if (!(i == expected$91)) {
                                problems.ref = (.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance(new .java.lang.StringBuilder().append("iterated over unexpected element on index ").append(index2.ref).append(": got ").append(i).append(" expected ").append(expected$91).toString())}, problems.ref);
                            }
                        } else {
                            problems.ref = (.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance(new .java.lang.StringBuilder().append("more iterations than expected: expected ").append(expect$88.getSize()).append(" iterations, but index ").append(index2.ref).append(" had value ").append(i).toString())}, problems.ref);
                        }
                    }
                    .ceylon.language.Integer breakAfter$94;
                    if ((breakAfter$94 = breakAfter) != null) {
                        final long breakAfter$95 = breakAfter$94.longValue();
                        if (index2.ref >= breakAfter$95) {
                            break loop_3;
                        }
                    }
                    (
                        let
                        {
                            long $ceylontmp$op$96 = index2.ref;
                            index2.ref = $ceylontmp$op$96 + 1;
                        }
                        returning $ceylontmp$op$96;
                    );
                }                 while (false);
                if ($ceylontmp$step$82 != 1L) $ceylontmp$step$82 == 1 ? $ceylontmp$element$80 += $ceylontmp$incr$78 : ($ceylontmp$element$80 = .ceylon.language.Integer.neighbour($ceylontmp$element$80, $ceylontmp$incr$78));
            }             while ($ceylontmp$step$82 == 1L ? $ceylontmp$step$82 == 1 ? $ceylontmp$increasing$77 ? i$81 - $ceylontmp$last$76 != 0L : i$81 - $ceylontmp$last$76 != 0L : $ceylontmp$increasing$77 ? .ceylon.language.Integer.offsetSign(i$81, $ceylontmp$last$76) <= 0L && .ceylon.language.Integer.offsetSign(i$81, $ceylontmp$first$75) >= 0L : .ceylon.language.Integer.offsetSign(i$81, $ceylontmp$last$76) >= 0L && .ceylon.language.Integer.offsetSign(i$81, $ceylontmp$first$75) <= 0L : $ceylontmp$step$82 == 1 ? $ceylontmp$increasing$77 ? $ceylontmp$element$80 - $ceylontmp$last$76 != 0L : $ceylontmp$element$80 - $ceylontmp$last$76 != 0L : $ceylontmp$increasing$77 ? .ceylon.language.Integer.offsetSign($ceylontmp$element$80, $ceylontmp$last$76) <= 0L && .ceylon.language.Integer.offsetSign($ceylontmp$element$80, $ceylontmp$first$75) >= 0L : .ceylon.language.Integer.offsetSign($ceylontmp$element$80, $ceylontmp$last$76) >= 0L && .ceylon.language.Integer.offsetSign($ceylontmp$element$80, $ceylontmp$first$75) <= 0L);
        } catch (final .java.lang.Throwable t) {
            t2 = t;
        }
        if (!(index.ref == index2.ref)) {
            problems.ref = (.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance(new .java.lang.StringBuilder().append("different number of iterations: expected ").append(index.ref).append(" but was ").append(index2.ref).toString())}, problems.ref);
        }
        if (!(ss.ref == ss2.ref)) {
            problems.ref = (.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance(new .java.lang.StringBuilder().append("different sums: expected ").append(ss.ref).append(" but was ").append(ss2.ref).toString())}, problems.ref);
        }
        .java.lang.Throwable got1$100;
        if ((got1$100 = t1) != null) {
            final .java.lang.Throwable got1$104 = got1$100;
            .java.lang.Throwable got2$106;
            if ((got2$106 = t2) != null) {
                final .java.lang.Throwable got2$107 = got2$106;
                if (!.ceylon.language.meta.type_.<.java.lang.Throwable>type(.ceylon.language.Throwable.$TypeDescriptor$, got1$104).equals(.ceylon.language.meta.type_.<.java.lang.Throwable>type(.ceylon.language.Throwable.$TypeDescriptor$, got2$107))) {
                    problems.ref = (.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance(new .java.lang.StringBuilder().append("different exception types: expected ").append(.ceylon.language.meta.type_.<.java.lang.Throwable>type(.ceylon.language.Throwable.$TypeDescriptor$, got1$104).toString()).append(" but got ").append(.ceylon.language.meta.type_.<.java.lang.Throwable>type(.ceylon.language.Throwable.$TypeDescriptor$, got2$107).toString()).toString())}, problems.ref);
                }
                if (!.com.redhat.ceylon.compiler.java.Util.throwableMessage(got1$104).equals(.com.redhat.ceylon.compiler.java.Util.throwableMessage(got2$107))) {
                }
            } else {
                problems.ref = (.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance(new .java.lang.StringBuilder().append("unoptimized threw ").append(got1$104.toString()).append(", but optimized ran normally").toString())}, problems.ref);
            }
        } else {
            .java.lang.Throwable got2$102;
            if ((got2$102 = t2) != null) {
                final .java.lang.Throwable got2$103 = got2$102;
                problems.ref = (.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance(new .java.lang.StringBuilder().append("optimized threw ").append(got2$103.toString()).append(", but unoptimized ran normally").toString())}, problems.ref);
            }
        }
        if ((
            let
            {
                .java.lang.Object $ceylontmp$111 = problems.ref;
            }
            returning $ceylontmp$111 instanceof .ceylon.language.Sequence;
        )) {
            throw new .ceylon.language.Exception(.ceylon.language.String.instance(new .java.lang.StringBuilder().append("(").append(start).append("..").append(end).append(").by(").append(by).append("): ").append(problems.ref.toString()).toString()));
        }
    }
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(
        major = 8,
        minor = 1)
@.com.redhat.ceylon.compiler.java.metadata.Method
final class compareSpanCharacter2130_ {
    
    private compareSpanCharacter2130_() {
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    static void compareSpanCharacter2130(final int start, final int end) {
        (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.Character> $ceylontmp$expect$172 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanCharacter2130_.compareSpanCharacter2130$expect(start, end);
                .ceylon.language.Integer $ceylontmp$breakAfter$173 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanCharacter2130_.compareSpanCharacter2130$breakAfter(start, end, $ceylontmp$expect$172);
                compareSpanCharacter2130(start, end, $ceylontmp$expect$172, $ceylontmp$breakAfter$173);
            }
            returning null;
        );
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static final .ceylon.language.Sequential<? extends .ceylon.language.Character> compareSpanCharacter2130$expect(final int start, final int end) {
        return null;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    static void compareSpanCharacter2130(final int start, final int end, final .ceylon.language.Sequential<? extends .ceylon.language.Character> expect) {
        (
            let
            {
                .ceylon.language.Integer $ceylontmp$breakAfter$174 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanCharacter2130_.compareSpanCharacter2130$breakAfter(start, end, expect);
                compareSpanCharacter2130(start, end, expect, $ceylontmp$breakAfter$174);
            }
            returning null;
        );
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static final .ceylon.language.Integer compareSpanCharacter2130$breakAfter(final int start, final int end, final .ceylon.language.Sequential<? extends .ceylon.language.Character> expect) {
        return null;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Anything")
    static void compareSpanCharacter2130(@.com.redhat.ceylon.compiler.java.metadata.Name("start")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Character")
    final int start, @.com.redhat.ceylon.compiler.java.metadata.Name("end")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Character")
    final int end, @.com.redhat.ceylon.compiler.java.metadata.Name("expect")
    @.com.redhat.ceylon.compiler.java.metadata.Defaulted
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Character[]?")
    final .ceylon.language.Sequential<? extends .ceylon.language.Character> expect, @.com.redhat.ceylon.compiler.java.metadata.Name("breakAfter")
    @.com.redhat.ceylon.compiler.java.metadata.Defaulted
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer?")
    final .ceylon.language.Integer breakAfter) {
        final VariableBox<.ceylon.language.Sequential<? extends .ceylon.language.String>> problems = new VariableBox<.ceylon.language.Sequential<? extends .ceylon.language.String>>((.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential).ceylon.language.empty_.get_());
        final .com.redhat.ceylon.compiler.java.language.VariableBoxLong index = new .com.redhat.ceylon.compiler.java.language.VariableBoxLong(0L);
        final .com.redhat.ceylon.compiler.java.language.VariableBoxLong ss = new .com.redhat.ceylon.compiler.java.language.VariableBoxLong(0L);
        .java.lang.Throwable t1 = null;
        try {
            boolean loopentered$118 = false;
            .java.lang.Object elem$119;
            .ceylon.language.Iterator<? extends .ceylon.language.Character> i$iterator$$120 = .ceylon.language.span_.<.ceylon.language.Character>span(.ceylon.language.Character.$TypeDescriptor$, .ceylon.language.Character.instance(start), .ceylon.language.Character.instance(end)).iterator();
            loop_4: while (!((elem$119 = i$iterator$$120.next()) instanceof .ceylon.language.Finished)) {
                loopentered$118 = true;
                final int i = ((.ceylon.language.Character)elem$119).intValue();
                (
                    let
                    {
                        long $ceylontmp$op$121 = ss.ref + (
                            let
                            {
                                long base$122 = .ceylon.language.Character.getInteger(i);
                            }
                            returning base$122 * base$122;
                        );
                        ss.ref = $ceylontmp$op$121;
                    }
                    returning $ceylontmp$op$121;
                );
                .ceylon.language.Sequential<? extends .ceylon.language.Character> expect$124;
                if ((expect$124 = expect) != null) {
                    final .ceylon.language.Sequential<? extends .ceylon.language.Character> expect$125 = expect$124;
                    .ceylon.language.Character expected$127;
                    if ((expected$127 = expect$125.getFromFirst(index.ref)) != null) {
                        final int expected$128 = expected$127.intValue();
                        if (!(i == expected$128)) {
                            problems.ref = (.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance(new .java.lang.StringBuilder().append("iterated over unexpected element on index ").append(index.ref).append(": got ").appendCodePoint(i).append(" expected ").appendCodePoint(expected$128).toString())}, problems.ref);
                        }
                    } else {
                        problems.ref = (.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance(new .java.lang.StringBuilder().append("more iterations than expected: expected ").append(expect$125.getSize()).append(" iterations, but index ").append(index.ref).append(" had value ").appendCodePoint(i).toString())}, problems.ref);
                    }
                }
                .ceylon.language.Integer breakAfter$131;
                if ((breakAfter$131 = breakAfter) != null) {
                    final long breakAfter$132 = breakAfter$131.longValue();
                    if (index.ref >= breakAfter$132) {
                        break loop_4;
                    }
                }
                (
                    let
                    {
                        long $ceylontmp$op$133 = index.ref;
                        index.ref = $ceylontmp$op$133 + 1;
                    }
                    returning $ceylontmp$op$133;
                );
            }
            if (!loopentered$118) throw new .ceylon.language.AssertionError("nonempty Iterable with initial \'finished\' element");
        } catch (final .java.lang.Throwable t) {
            t1 = t;
        }
        final .com.redhat.ceylon.compiler.java.language.VariableBoxLong index2 = new .com.redhat.ceylon.compiler.java.language.VariableBoxLong(0L);
        final .com.redhat.ceylon.compiler.java.language.VariableBoxLong ss2 = new .com.redhat.ceylon.compiler.java.language.VariableBoxLong(0L);
        .java.lang.Throwable t2 = null;
        try {
            final int $ceylontmp$first$136 = start;
            final int $ceylontmp$last$137 = end;
            final boolean $ceylontmp$increasing$138 = .ceylon.language.Character.offset($ceylontmp$last$137, $ceylontmp$first$136) >= 0;
            boolean $ceylontmp$143 = .ceylon.language.Character.offsetSign($ceylontmp$first$136, .ceylon.language.Character.getSuccessor($ceylontmp$first$136)) > 0L && .ceylon.language.Character.offsetSign(.ceylon.language.Character.getPredecessor($ceylontmp$last$137), $ceylontmp$last$137) > 0L;
            final long $ceylontmp$incr$139 = $ceylontmp$increasing$138 ? 1 : -1;
            int i$142 = $ceylontmp$first$136;
            int $ceylontmp$element$141 = $ceylontmp$first$136;
            boolean $ceylontmp$f$140 = false;
            loop_5: do {
                if ($ceylontmp$f$140) $ceylontmp$element$141 = .ceylon.language.Character.neighbour($ceylontmp$element$141, $ceylontmp$incr$139);
                $ceylontmp$f$140 = true;
                i$142 = $ceylontmp$element$141;
                final int i = i$142;
                $ceylontmp$continue$135: do {
                    (
                        let
                        {
                            long $ceylontmp$op$144 = ss2.ref + (
                                let
                                {
                                    long base$145 = .ceylon.language.Character.getInteger(i);
                                }
                                returning base$145 * base$145;
                            );
                            ss2.ref = $ceylontmp$op$144;
                        }
                        returning $ceylontmp$op$144;
                    );
                    .ceylon.language.Sequential<? extends .ceylon.language.Character> expect$147;
                    if ((expect$147 = expect) != null) {
                        final .ceylon.language.Sequential<? extends .ceylon.language.Character> expect$148 = expect$147;
                        .ceylon.language.Character expected$150;
                        if ((expected$150 = expect$148.getFromFirst(index2.ref)) != null) {
                            final int expected$151 = expected$150.intValue();
                            if (!(i == expected$151)) {
                                problems.ref = (.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance(new .java.lang.StringBuilder().append("iterated over unexpected element on index ").append(index2.ref).append(": got ").appendCodePoint(i).append(" expected ").appendCodePoint(expected$151).toString())}, problems.ref);
                            }
                        } else {
                            problems.ref = (.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance(new .java.lang.StringBuilder().append("more iterations than expected: expected ").append(expect$148.getSize()).append(" iterations, but index ").append(index2.ref).append(" had value ").appendCodePoint(i).toString())}, problems.ref);
                        }
                    }
                    .ceylon.language.Integer breakAfter$154;
                    if ((breakAfter$154 = breakAfter) != null) {
                        final long breakAfter$155 = breakAfter$154.longValue();
                        if (index2.ref >= breakAfter$155) {
                            break loop_5;
                        }
                    }
                    (
                        let
                        {
                            long $ceylontmp$op$156 = index2.ref;
                            index2.ref = $ceylontmp$op$156 + 1;
                        }
                        returning $ceylontmp$op$156;
                    );
                }                 while (false);
            }             while ($ceylontmp$increasing$138 ? i$142 - $ceylontmp$last$137 != 0 : i$142 - $ceylontmp$last$137 != 0);
        } catch (final .java.lang.Throwable t) {
            t2 = t;
        }
        if (!(index.ref == index2.ref)) {
            problems.ref = (.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance(new .java.lang.StringBuilder().append("different number of iterations: expected ").append(index.ref).append(" but was ").append(index2.ref).toString())}, problems.ref);
        }
        if (!(ss.ref == ss2.ref)) {
            problems.ref = (.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance(new .java.lang.StringBuilder().append("different sums: expected ").append(ss.ref).append(" but was ").append(ss2.ref).toString())}, problems.ref);
        }
        .java.lang.Throwable got1$160;
        if ((got1$160 = t1) != null) {
            final .java.lang.Throwable got1$164 = got1$160;
            .java.lang.Throwable got2$166;
            if ((got2$166 = t2) != null) {
                final .java.lang.Throwable got2$167 = got2$166;
                if (!.ceylon.language.meta.type_.<.java.lang.Throwable>type(.ceylon.language.Throwable.$TypeDescriptor$, got1$164).equals(.ceylon.language.meta.type_.<.java.lang.Throwable>type(.ceylon.language.Throwable.$TypeDescriptor$, got2$167))) {
                    problems.ref = (.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance(new .java.lang.StringBuilder().append("different exception types: expected ").append(.ceylon.language.meta.type_.<.java.lang.Throwable>type(.ceylon.language.Throwable.$TypeDescriptor$, got1$164).toString()).append(" but got ").append(.ceylon.language.meta.type_.<.java.lang.Throwable>type(.ceylon.language.Throwable.$TypeDescriptor$, got2$167).toString()).toString())}, problems.ref);
                }
                if (!.com.redhat.ceylon.compiler.java.Util.throwableMessage(got1$164).equals(.com.redhat.ceylon.compiler.java.Util.throwableMessage(got2$167))) {
                    problems.ref = (.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance(new .java.lang.StringBuilder().append("different exception messages: expected ").append(.com.redhat.ceylon.compiler.java.Util.throwableMessage(got1$164)).append(" but got ").append(.com.redhat.ceylon.compiler.java.Util.throwableMessage(got2$167)).toString())}, problems.ref);
                }
            } else {
                problems.ref = (.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance(new .java.lang.StringBuilder().append("unoptimized threw ").append(got1$164.toString()).append(", but optimized ran normally").toString())}, problems.ref);
            }
        } else {
            .java.lang.Throwable got2$162;
            if ((got2$162 = t2) != null) {
                final .java.lang.Throwable got2$163 = got2$162;
                problems.ref = (.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance(new .java.lang.StringBuilder().append("optimized threw ").append(got2$163.toString()).append(", but unoptimized ran normally").toString())}, problems.ref);
            }
        }
        if ((
            let
            {
                .java.lang.Object $ceylontmp$171 = problems.ref;
            }
            returning $ceylontmp$171 instanceof .ceylon.language.Sequence;
        )) {
            throw new .ceylon.language.Exception(.ceylon.language.String.instance(new .java.lang.StringBuilder().append("(").append(.ceylon.language.Character.getInteger(start)).append("..").append(.ceylon.language.Character.getInteger(end)).append("): ").append(problems.ref.toString()).toString()));
        }
    }
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(
        major = 8,
        minor = 1)
@.com.redhat.ceylon.compiler.java.metadata.Method
final class compareSpanCharacterBy2130_ {
    
    private compareSpanCharacterBy2130_() {
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    static void compareSpanCharacterBy2130(final int start, final int end, final long by) {
        (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.Character> $ceylontmp$expect$230 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanCharacterBy2130_.compareSpanCharacterBy2130$expect(start, end, by);
                .ceylon.language.Integer $ceylontmp$breakAfter$231 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanCharacterBy2130_.compareSpanCharacterBy2130$breakAfter(start, end, by, $ceylontmp$expect$230);
                compareSpanCharacterBy2130(start, end, by, $ceylontmp$expect$230, $ceylontmp$breakAfter$231);
            }
            returning null;
        );
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static final .ceylon.language.Sequential<? extends .ceylon.language.Character> compareSpanCharacterBy2130$expect(final int start, final int end, final long by) {
        return null;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    static void compareSpanCharacterBy2130(final int start, final int end, final long by, final .ceylon.language.Sequential<? extends .ceylon.language.Character> expect) {
        (
            let
            {
                .ceylon.language.Integer $ceylontmp$breakAfter$232 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanCharacterBy2130_.compareSpanCharacterBy2130$breakAfter(start, end, by, expect);
                compareSpanCharacterBy2130(start, end, by, expect, $ceylontmp$breakAfter$232);
            }
            returning null;
        );
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static final .ceylon.language.Integer compareSpanCharacterBy2130$breakAfter(final int start, final int end, final long by, final .ceylon.language.Sequential<? extends .ceylon.language.Character> expect) {
        return null;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Anything")
    static void compareSpanCharacterBy2130(@.com.redhat.ceylon.compiler.java.metadata.Name("start")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Character")
    final int start, @.com.redhat.ceylon.compiler.java.metadata.Name("end")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Character")
    final int end, @.com.redhat.ceylon.compiler.java.metadata.Name("by")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    final long by, @.com.redhat.ceylon.compiler.java.metadata.Name("expect")
    @.com.redhat.ceylon.compiler.java.metadata.Defaulted
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Character[]?")
    final .ceylon.language.Sequential<? extends .ceylon.language.Character> expect, @.com.redhat.ceylon.compiler.java.metadata.Name("breakAfter")
    @.com.redhat.ceylon.compiler.java.metadata.Defaulted
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer?")
    final .ceylon.language.Integer breakAfter) {
        final VariableBox<.ceylon.language.Sequential<? extends .ceylon.language.String>> problems = new VariableBox<.ceylon.language.Sequential<? extends .ceylon.language.String>>((.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential).ceylon.language.empty_.get_());
        final .com.redhat.ceylon.compiler.java.language.VariableBoxLong index = new .com.redhat.ceylon.compiler.java.language.VariableBoxLong(0L);
        final .com.redhat.ceylon.compiler.java.language.VariableBoxLong ss = new .com.redhat.ceylon.compiler.java.language.VariableBoxLong(0L);
        .java.lang.Throwable t1 = null;
        try {
            boolean loopentered$175 = false;
            .java.lang.Object elem$176;
            .ceylon.language.Iterator<? extends .ceylon.language.Character> i$iterator$$177 = .ceylon.language.span_.<.ceylon.language.Character>span(.ceylon.language.Character.$TypeDescriptor$, .ceylon.language.Character.instance(start), .ceylon.language.Character.instance(end)).by(by).iterator();
            loop_6: while (!((elem$176 = i$iterator$$177.next()) instanceof .ceylon.language.Finished)) {
                loopentered$175 = true;
                final int i = ((.ceylon.language.Character)elem$176).intValue();
                (
                    let
                    {
                        long $ceylontmp$op$178 = ss.ref + (
                            let
                            {
                                long base$179 = .ceylon.language.Character.getInteger(i);
                            }
                            returning base$179 * base$179;
                        );
                        ss.ref = $ceylontmp$op$178;
                    }
                    returning $ceylontmp$op$178;
                );
                .ceylon.language.Sequential<? extends .ceylon.language.Character> expect$181;
                if ((expect$181 = expect) != null) {
                    final .ceylon.language.Sequential<? extends .ceylon.language.Character> expect$182 = expect$181;
                    .ceylon.language.Character expected$184;
                    if ((expected$184 = expect$182.getFromFirst(index.ref)) != null) {
                        final int expected$185 = expected$184.intValue();
                        if (!(i == expected$185)) {
                            problems.ref = (.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance(new .java.lang.StringBuilder().append("iterated over unexpected element on index ").append(index.ref).append(": got ").appendCodePoint(i).append(" expected ").appendCodePoint(expected$185).toString())}, problems.ref);
                        }
                    } else {
                        problems.ref = (.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance(new .java.lang.StringBuilder().append("more iterations than expected: expected ").append(expect$182.getSize()).append(" iterations, but index ").append(index.ref).append(" had value ").appendCodePoint(i).toString())}, problems.ref);
                    }
                }
                .ceylon.language.Integer breakAfter$188;
                if ((breakAfter$188 = breakAfter) != null) {
                    final long breakAfter$189 = breakAfter$188.longValue();
                    if (index.ref >= breakAfter$189) {
                        break loop_6;
                    }
                }
                (
                    let
                    {
                        long $ceylontmp$op$190 = index.ref;
                        index.ref = $ceylontmp$op$190 + 1;
                    }
                    returning $ceylontmp$op$190;
                );
            }
            if (!loopentered$175) throw new .ceylon.language.AssertionError("nonempty Iterable with initial \'finished\' element");
        } catch (final .java.lang.Throwable t) {
            t1 = t;
        }
        final .com.redhat.ceylon.compiler.java.language.VariableBoxLong index2 = new .com.redhat.ceylon.compiler.java.language.VariableBoxLong(0L);
        final .com.redhat.ceylon.compiler.java.language.VariableBoxLong ss2 = new .com.redhat.ceylon.compiler.java.language.VariableBoxLong(0L);
        .java.lang.Throwable t2 = null;
        try {
            final long $ceylontmp$step$200 = by;
            if ($ceylontmp$step$200 <= 0) throw new .ceylon.language.AssertionError("Assertion failed" + ": step size must be greater than zero" + (.java.lang.System.lineSeparator() + "\tviolated " + "step > 0"));
            final int $ceylontmp$first$193 = start;
            final int $ceylontmp$last$194 = end;
            final boolean $ceylontmp$increasing$195 = $ceylontmp$step$200 == 1 ? .ceylon.language.Character.offset($ceylontmp$last$194, $ceylontmp$first$193) >= 0 : .ceylon.language.Character.offsetSign($ceylontmp$last$194, $ceylontmp$first$193) >= 0;
            boolean $ceylontmp$201 = .ceylon.language.Character.offsetSign($ceylontmp$first$193, .ceylon.language.Character.getSuccessor($ceylontmp$first$193)) > 0L && .ceylon.language.Character.offsetSign(.ceylon.language.Character.getPredecessor($ceylontmp$last$194), $ceylontmp$last$194) > 0L;
            final long $ceylontmp$incr$196 = $ceylontmp$step$200 == 1 ? $ceylontmp$increasing$195 ? $ceylontmp$step$200 : -1 : $ceylontmp$increasing$195 ? $ceylontmp$step$200 : -$ceylontmp$step$200;
            int i$199 = $ceylontmp$first$193;
            int $ceylontmp$element$198 = $ceylontmp$first$193;
            boolean $ceylontmp$f$197 = false;
            loop_7: do {
                if ($ceylontmp$f$197 && $ceylontmp$step$200 == 1L) $ceylontmp$step$200 == 1 ? $ceylontmp$element$198 = .ceylon.language.Character.neighbour($ceylontmp$element$198, $ceylontmp$incr$196) : ($ceylontmp$element$198 = .ceylon.language.Character.neighbour($ceylontmp$element$198, $ceylontmp$incr$196));
                $ceylontmp$f$197 = true;
                i$199 = $ceylontmp$element$198;
                final int i = i$199;
                $ceylontmp$continue$192: do {
                    (
                        let
                        {
                            long $ceylontmp$op$202 = ss2.ref + (
                                let
                                {
                                    long base$203 = .ceylon.language.Character.getInteger(i);
                                }
                                returning base$203 * base$203;
                            );
                            ss2.ref = $ceylontmp$op$202;
                        }
                        returning $ceylontmp$op$202;
                    );
                    .ceylon.language.Sequential<? extends .ceylon.language.Character> expect$205;
                    if ((expect$205 = expect) != null) {
                        final .ceylon.language.Sequential<? extends .ceylon.language.Character> expect$206 = expect$205;
                        .ceylon.language.Character expected$208;
                        if ((expected$208 = expect$206.getFromFirst(index2.ref)) != null) {
                            final int expected$209 = expected$208.intValue();
                            if (!(i == expected$209)) {
                                problems.ref = (.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance(new .java.lang.StringBuilder().append("iterated over unexpected element on index ").append(index2.ref).append(": got ").appendCodePoint(i).append(" expected ").appendCodePoint(expected$209).toString())}, problems.ref);
                            }
                        } else {
                            problems.ref = (.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance(new .java.lang.StringBuilder().append("more iterations than expected: expected ").append(expect$206.getSize()).append(" iterations, but index ").append(index2.ref).append(" had value ").appendCodePoint(i).toString())}, problems.ref);
                        }
                    }
                    .ceylon.language.Integer breakAfter$212;
                    if ((breakAfter$212 = breakAfter) != null) {
                        final long breakAfter$213 = breakAfter$212.longValue();
                        if (index2.ref >= breakAfter$213) {
                            break loop_7;
                        }
                    }
                    (
                        let
                        {
                            long $ceylontmp$op$214 = index2.ref;
                            index2.ref = $ceylontmp$op$214 + 1;
                        }
                        returning $ceylontmp$op$214;
                    );
                }                 while (false);
                if ($ceylontmp$step$200 != 1L) $ceylontmp$step$200 == 1 ? $ceylontmp$element$198 = .ceylon.language.Character.neighbour($ceylontmp$element$198, $ceylontmp$incr$196) : ($ceylontmp$element$198 = .ceylon.language.Character.neighbour($ceylontmp$element$198, $ceylontmp$incr$196));
            }             while ($ceylontmp$step$200 == 1L ? $ceylontmp$step$200 == 1 ? $ceylontmp$increasing$195 ? i$199 - $ceylontmp$last$194 != 0 : i$199 - $ceylontmp$last$194 != 0 : $ceylontmp$increasing$195 ? .ceylon.language.Character.offsetSign(i$199, $ceylontmp$last$194) <= 0 && .ceylon.language.Character.offsetSign(i$199, $ceylontmp$first$193) >= 0 : .ceylon.language.Character.offsetSign(i$199, $ceylontmp$last$194) >= 0 && .ceylon.language.Character.offsetSign(i$199, $ceylontmp$first$193) <= 0 : $ceylontmp$step$200 == 1 ? $ceylontmp$increasing$195 ? $ceylontmp$element$198 - $ceylontmp$last$194 != 0 : $ceylontmp$element$198 - $ceylontmp$last$194 != 0 : $ceylontmp$increasing$195 ? .ceylon.language.Character.offsetSign($ceylontmp$element$198, $ceylontmp$last$194) <= 0 && .ceylon.language.Character.offsetSign($ceylontmp$element$198, $ceylontmp$first$193) >= 0 : .ceylon.language.Character.offsetSign($ceylontmp$element$198, $ceylontmp$last$194) >= 0 && .ceylon.language.Character.offsetSign($ceylontmp$element$198, $ceylontmp$first$193) <= 0);
        } catch (final .java.lang.Throwable t) {
            t2 = t;
        }
        if (!(index.ref == index2.ref)) {
            problems.ref = (.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance(new .java.lang.StringBuilder().append("different number of iterations: expected ").append(index.ref).append(" but was ").append(index2.ref).toString())}, problems.ref);
        }
        if (!(ss.ref == ss2.ref)) {
            problems.ref = (.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance(new .java.lang.StringBuilder().append("different sums: expected ").append(ss.ref).append(" but was ").append(ss2.ref).toString())}, problems.ref);
        }
        .java.lang.Throwable got1$218;
        if ((got1$218 = t1) != null) {
            final .java.lang.Throwable got1$222 = got1$218;
            .java.lang.Throwable got2$224;
            if ((got2$224 = t2) != null) {
                final .java.lang.Throwable got2$225 = got2$224;
                if (!.ceylon.language.meta.type_.<.java.lang.Throwable>type(.ceylon.language.Throwable.$TypeDescriptor$, got1$222).equals(.ceylon.language.meta.type_.<.java.lang.Throwable>type(.ceylon.language.Throwable.$TypeDescriptor$, got2$225))) {
                    problems.ref = (.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance(new .java.lang.StringBuilder().append("different exception types: expected ").append(.ceylon.language.meta.type_.<.java.lang.Throwable>type(.ceylon.language.Throwable.$TypeDescriptor$, got1$222).toString()).append(" but got ").append(.ceylon.language.meta.type_.<.java.lang.Throwable>type(.ceylon.language.Throwable.$TypeDescriptor$, got2$225).toString()).toString())}, problems.ref);
                }
                if (!.com.redhat.ceylon.compiler.java.Util.throwableMessage(got1$222).equals(.com.redhat.ceylon.compiler.java.Util.throwableMessage(got2$225))) {
                    problems.ref = (.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance(new .java.lang.StringBuilder().append("different exception messages: expected ").append(.com.redhat.ceylon.compiler.java.Util.throwableMessage(got1$222)).append(" but got ").append(.com.redhat.ceylon.compiler.java.Util.throwableMessage(got2$225)).toString())}, problems.ref);
                }
            } else {
                problems.ref = (.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance(new .java.lang.StringBuilder().append("unoptimized threw ").append(got1$222.toString()).append(", but optimized ran normally").toString())}, problems.ref);
            }
        } else {
            .java.lang.Throwable got2$220;
            if ((got2$220 = t2) != null) {
                final .java.lang.Throwable got2$221 = got2$220;
                problems.ref = (.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance(new .java.lang.StringBuilder().append("optimized threw ").append(got2$221.toString()).append(", but unoptimized ran normally").toString())}, problems.ref);
            }
        }
        if ((
            let
            {
                .java.lang.Object $ceylontmp$229 = problems.ref;
            }
            returning $ceylontmp$229 instanceof .ceylon.language.Sequence;
        )) {
            throw new .ceylon.language.Exception(.ceylon.language.String.instance(new .java.lang.StringBuilder().append("(").appendCodePoint(start).append("..").appendCodePoint(end).append(").by(").append(by).append("): ").append(problems.ref.toString()).toString()));
        }
    }
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(
        major = 8,
        minor = 1)
@.com.redhat.ceylon.compiler.java.metadata.Method
final class bug2130Span_ {
    
    private bug2130Span_() {
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Anything")
    static void bug2130Span() {
        (
            let
            {
                long arg$233$0 = 0L;
                long arg$233$1 = 0L;
                .ceylon.language.Sequential arg$233$2 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanInteger2130_.compareSpanInteger2130$expect(arg$233$0, arg$233$1);
                .ceylon.language.Integer arg$233$3 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanInteger2130_.compareSpanInteger2130$breakAfter(arg$233$0, arg$233$1, arg$233$2);
                .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanInteger2130_.compareSpanInteger2130(arg$233$0, arg$233$1, arg$233$2, arg$233$3);
            }
            returning null;
        );
        (
            let
            {
                long arg$234$0 = 0L;
                long arg$234$1 = 1L;
                .ceylon.language.Sequential arg$234$2 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanInteger2130_.compareSpanInteger2130$expect(arg$234$0, arg$234$1);
                .ceylon.language.Integer arg$234$3 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanInteger2130_.compareSpanInteger2130$breakAfter(arg$234$0, arg$234$1, arg$234$2);
                .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanInteger2130_.compareSpanInteger2130(arg$234$0, arg$234$1, arg$234$2, arg$234$3);
            }
            returning null;
        );
        (
            let
            {
                long arg$235$0 = 1L;
                long arg$235$1 = 0L;
                .ceylon.language.Sequential arg$235$2 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanInteger2130_.compareSpanInteger2130$expect(arg$235$0, arg$235$1);
                .ceylon.language.Integer arg$235$3 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanInteger2130_.compareSpanInteger2130$breakAfter(arg$235$0, arg$235$1, arg$235$2);
                .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanInteger2130_.compareSpanInteger2130(arg$235$0, arg$235$1, arg$235$2, arg$235$3);
            }
            returning null;
        );
        (
            let
            {
                long arg$236$0 = 1L;
                long arg$236$1 = 1L;
                .ceylon.language.Sequential arg$236$2 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanInteger2130_.compareSpanInteger2130$expect(arg$236$0, arg$236$1);
                .ceylon.language.Integer arg$236$3 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanInteger2130_.compareSpanInteger2130$breakAfter(arg$236$0, arg$236$1, arg$236$2);
                .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanInteger2130_.compareSpanInteger2130(arg$236$0, arg$236$1, arg$236$2, arg$236$3);
            }
            returning null;
        );
        (
            let
            {
                long arg$237$0 = -2L;
                long arg$237$1 = 2L;
                .ceylon.language.Sequential arg$237$2 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanInteger2130_.compareSpanInteger2130$expect(arg$237$0, arg$237$1);
                .ceylon.language.Integer arg$237$3 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanInteger2130_.compareSpanInteger2130$breakAfter(arg$237$0, arg$237$1, arg$237$2);
                .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanInteger2130_.compareSpanInteger2130(arg$237$0, arg$237$1, arg$237$2, arg$237$3);
            }
            returning null;
        );
        (
            let
            {
                long arg$238$0 = 2L;
                long arg$238$1 = -2L;
                .ceylon.language.Sequential arg$238$2 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanInteger2130_.compareSpanInteger2130$expect(arg$238$0, arg$238$1);
                .ceylon.language.Integer arg$238$3 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanInteger2130_.compareSpanInteger2130$breakAfter(arg$238$0, arg$238$1, arg$238$2);
                .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanInteger2130_.compareSpanInteger2130(arg$238$0, arg$238$1, arg$238$2, arg$238$3);
            }
            returning null;
        );
        (
            let
            {
                long arg$239$0 = .ceylon.language.runtime_.get_().getMaxIntegerValue();
                long arg$239$1 = .ceylon.language.runtime_.get_().getMaxIntegerValue();
                .ceylon.language.Sequential arg$239$2 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanInteger2130_.compareSpanInteger2130$expect(arg$239$0, arg$239$1);
                .ceylon.language.Integer arg$239$3 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanInteger2130_.compareSpanInteger2130$breakAfter(arg$239$0, arg$239$1, arg$239$2);
                .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanInteger2130_.compareSpanInteger2130(arg$239$0, arg$239$1, arg$239$2, arg$239$3);
            }
            returning null;
        );
        (
            let
            {
                long arg$240$0 = .ceylon.language.runtime_.get_().getMinIntegerValue();
                long arg$240$1 = .ceylon.language.runtime_.get_().getMinIntegerValue();
                .ceylon.language.Sequential arg$240$2 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanInteger2130_.compareSpanInteger2130$expect(arg$240$0, arg$240$1);
                .ceylon.language.Integer arg$240$3 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanInteger2130_.compareSpanInteger2130$breakAfter(arg$240$0, arg$240$1, arg$240$2);
                .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanInteger2130_.compareSpanInteger2130(arg$240$0, arg$240$1, arg$240$2, arg$240$3);
            }
            returning null;
        );
        (
            let
            {
                long arg$241$0 = -2L;
                long arg$241$1 = .ceylon.language.runtime_.get_().getMaxIntegerValue();
                .ceylon.language.Sequential arg$241$2 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanInteger2130_.compareSpanInteger2130$expect(arg$241$0, arg$241$1);
                .ceylon.language.Integer arg$241$3 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanInteger2130_.compareSpanInteger2130$breakAfter(arg$241$0, arg$241$1, arg$241$2);
                .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanInteger2130_.compareSpanInteger2130(arg$241$0, arg$241$1, arg$241$2, arg$241$3);
            }
            returning null;
        );
        (
            let
            {
                long arg$242$0 = .ceylon.language.runtime_.get_().getMaxIntegerValue();
                long arg$242$1 = -2L;
                .ceylon.language.Sequential arg$242$2 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanInteger2130_.compareSpanInteger2130$expect(arg$242$0, arg$242$1);
                .ceylon.language.Integer arg$242$3 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanInteger2130_.compareSpanInteger2130$breakAfter(arg$242$0, arg$242$1, arg$242$2);
                .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanInteger2130_.compareSpanInteger2130(arg$242$0, arg$242$1, arg$242$2, arg$242$3);
            }
            returning null;
        );
        boolean loopentered$243 = false;
        .java.lang.Object elem$244;
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> step$iterator$$245 = ((.ceylon.language.Sequence<? extends .ceylon.language.Integer>).ceylon.language.Tuple.instance(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(-1L),
                .ceylon.language.Integer.instance(0L),
                .ceylon.language.Integer.instance(1L),
                .ceylon.language.Integer.instance(2L),
                .ceylon.language.Integer.instance(.ceylon.language.runtime_.get_().getMaxIntegerValue())})).iterator();
        loop_8: while (!((elem$244 = step$iterator$$245.next()) instanceof .ceylon.language.Finished)) {
            loopentered$243 = true;
            final long step = ((.ceylon.language.Integer)elem$244).longValue();
            (
                let
                {
                    long arg$246$0 = 0L;
                    long arg$246$1 = 0L;
                    long arg$246$2 = step;
                    .ceylon.language.Sequential arg$246$3 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanIntegerBy2130_.compareSpanIntegerBy2130$expect(arg$246$0, arg$246$1, arg$246$2);
                    .ceylon.language.Integer arg$246$4 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanIntegerBy2130_.compareSpanIntegerBy2130$breakAfter(arg$246$0, arg$246$1, arg$246$2, arg$246$3);
                    boolean arg$246$5 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanIntegerBy2130_.compareSpanIntegerBy2130$debug(arg$246$0, arg$246$1, arg$246$2, arg$246$3, arg$246$4);
                    .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanIntegerBy2130_.compareSpanIntegerBy2130(arg$246$0, arg$246$1, arg$246$2, arg$246$3, arg$246$4, arg$246$5);
                }
                returning null;
            );
            (
                let
                {
                    long arg$247$0 = 0L;
                    long arg$247$1 = 1L;
                    long arg$247$2 = step;
                    .ceylon.language.Sequential arg$247$3 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanIntegerBy2130_.compareSpanIntegerBy2130$expect(arg$247$0, arg$247$1, arg$247$2);
                    .ceylon.language.Integer arg$247$4 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanIntegerBy2130_.compareSpanIntegerBy2130$breakAfter(arg$247$0, arg$247$1, arg$247$2, arg$247$3);
                    boolean arg$247$5 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanIntegerBy2130_.compareSpanIntegerBy2130$debug(arg$247$0, arg$247$1, arg$247$2, arg$247$3, arg$247$4);
                    .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanIntegerBy2130_.compareSpanIntegerBy2130(arg$247$0, arg$247$1, arg$247$2, arg$247$3, arg$247$4, arg$247$5);
                }
                returning null;
            );
            (
                let
                {
                    long arg$248$0 = 1L;
                    long arg$248$1 = 0L;
                    long arg$248$2 = step;
                    .ceylon.language.Sequential arg$248$3 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanIntegerBy2130_.compareSpanIntegerBy2130$expect(arg$248$0, arg$248$1, arg$248$2);
                    .ceylon.language.Integer arg$248$4 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanIntegerBy2130_.compareSpanIntegerBy2130$breakAfter(arg$248$0, arg$248$1, arg$248$2, arg$248$3);
                    boolean arg$248$5 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanIntegerBy2130_.compareSpanIntegerBy2130$debug(arg$248$0, arg$248$1, arg$248$2, arg$248$3, arg$248$4);
                    .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanIntegerBy2130_.compareSpanIntegerBy2130(arg$248$0, arg$248$1, arg$248$2, arg$248$3, arg$248$4, arg$248$5);
                }
                returning null;
            );
            (
                let
                {
                    long arg$249$0 = 1L;
                    long arg$249$1 = 1L;
                    long arg$249$2 = step;
                    .ceylon.language.Sequential arg$249$3 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanIntegerBy2130_.compareSpanIntegerBy2130$expect(arg$249$0, arg$249$1, arg$249$2);
                    .ceylon.language.Integer arg$249$4 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanIntegerBy2130_.compareSpanIntegerBy2130$breakAfter(arg$249$0, arg$249$1, arg$249$2, arg$249$3);
                    boolean arg$249$5 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanIntegerBy2130_.compareSpanIntegerBy2130$debug(arg$249$0, arg$249$1, arg$249$2, arg$249$3, arg$249$4);
                    .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanIntegerBy2130_.compareSpanIntegerBy2130(arg$249$0, arg$249$1, arg$249$2, arg$249$3, arg$249$4, arg$249$5);
                }
                returning null;
            );
            (
                let
                {
                    long arg$250$0 = 1L;
                    long arg$250$1 = 10L;
                    long arg$250$2 = step;
                    .ceylon.language.Sequential arg$250$3 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanIntegerBy2130_.compareSpanIntegerBy2130$expect(arg$250$0, arg$250$1, arg$250$2);
                    .ceylon.language.Integer arg$250$4 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanIntegerBy2130_.compareSpanIntegerBy2130$breakAfter(arg$250$0, arg$250$1, arg$250$2, arg$250$3);
                    boolean arg$250$5 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanIntegerBy2130_.compareSpanIntegerBy2130$debug(arg$250$0, arg$250$1, arg$250$2, arg$250$3, arg$250$4);
                    .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanIntegerBy2130_.compareSpanIntegerBy2130(arg$250$0, arg$250$1, arg$250$2, arg$250$3, arg$250$4, arg$250$5);
                }
                returning null;
            );
            (
                let
                {
                    long arg$251$0 = -2L;
                    long arg$251$1 = 2L;
                    long arg$251$2 = step;
                    .ceylon.language.Sequential arg$251$3 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanIntegerBy2130_.compareSpanIntegerBy2130$expect(arg$251$0, arg$251$1, arg$251$2);
                    .ceylon.language.Integer arg$251$4 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanIntegerBy2130_.compareSpanIntegerBy2130$breakAfter(arg$251$0, arg$251$1, arg$251$2, arg$251$3);
                    boolean arg$251$5 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanIntegerBy2130_.compareSpanIntegerBy2130$debug(arg$251$0, arg$251$1, arg$251$2, arg$251$3, arg$251$4);
                    .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanIntegerBy2130_.compareSpanIntegerBy2130(arg$251$0, arg$251$1, arg$251$2, arg$251$3, arg$251$4, arg$251$5);
                }
                returning null;
            );
            (
                let
                {
                    long arg$252$0 = 2L;
                    long arg$252$1 = -2L;
                    long arg$252$2 = step;
                    .ceylon.language.Sequential arg$252$3 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanIntegerBy2130_.compareSpanIntegerBy2130$expect(arg$252$0, arg$252$1, arg$252$2);
                    .ceylon.language.Integer arg$252$4 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanIntegerBy2130_.compareSpanIntegerBy2130$breakAfter(arg$252$0, arg$252$1, arg$252$2, arg$252$3);
                    boolean arg$252$5 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanIntegerBy2130_.compareSpanIntegerBy2130$debug(arg$252$0, arg$252$1, arg$252$2, arg$252$3, arg$252$4);
                    .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanIntegerBy2130_.compareSpanIntegerBy2130(arg$252$0, arg$252$1, arg$252$2, arg$252$3, arg$252$4, arg$252$5);
                }
                returning null;
            );
            (
                let
                {
                    long arg$253$0 = .ceylon.language.runtime_.get_().getMaxIntegerValue();
                    long arg$253$1 = .ceylon.language.runtime_.get_().getMaxIntegerValue();
                    long arg$253$2 = step;
                    .ceylon.language.Sequential arg$253$3 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanIntegerBy2130_.compareSpanIntegerBy2130$expect(arg$253$0, arg$253$1, arg$253$2);
                    .ceylon.language.Integer arg$253$4 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanIntegerBy2130_.compareSpanIntegerBy2130$breakAfter(arg$253$0, arg$253$1, arg$253$2, arg$253$3);
                    boolean arg$253$5 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanIntegerBy2130_.compareSpanIntegerBy2130$debug(arg$253$0, arg$253$1, arg$253$2, arg$253$3, arg$253$4);
                    .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanIntegerBy2130_.compareSpanIntegerBy2130(arg$253$0, arg$253$1, arg$253$2, arg$253$3, arg$253$4, arg$253$5);
                }
                returning null;
            );
            (
                let
                {
                    long arg$254$0 = .ceylon.language.runtime_.get_().getMinIntegerValue();
                    long arg$254$1 = .ceylon.language.runtime_.get_().getMinIntegerValue();
                    long arg$254$2 = step;
                    .ceylon.language.Sequential arg$254$3 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanIntegerBy2130_.compareSpanIntegerBy2130$expect(arg$254$0, arg$254$1, arg$254$2);
                    .ceylon.language.Integer arg$254$4 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanIntegerBy2130_.compareSpanIntegerBy2130$breakAfter(arg$254$0, arg$254$1, arg$254$2, arg$254$3);
                    boolean arg$254$5 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanIntegerBy2130_.compareSpanIntegerBy2130$debug(arg$254$0, arg$254$1, arg$254$2, arg$254$3, arg$254$4);
                    .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanIntegerBy2130_.compareSpanIntegerBy2130(arg$254$0, arg$254$1, arg$254$2, arg$254$3, arg$254$4, arg$254$5);
                }
                returning null;
            );
            (
                let
                {
                    long arg$255$0 = -2L;
                    long arg$255$1 = .ceylon.language.runtime_.get_().getMaxIntegerValue();
                    long arg$255$2 = step;
                    .ceylon.language.Integer arg$255$4 = (
                        let
                        {
                            .ceylon.language.Integer $ceylontmp$ifResult$256;
                            if (step == 1L || step == 2L) {
                                $ceylontmp$ifResult$256 = .ceylon.language.Integer.instance(3L);
                            } else {
                                null;
                                $ceylontmp$ifResult$256 = null;
                            }
                        }
                        returning $ceylontmp$ifResult$256;
                    );
                    boolean arg$255$5 = false;
                    .ceylon.language.Sequential arg$255$3 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanIntegerBy2130_.compareSpanIntegerBy2130$expect(arg$255$0, arg$255$1, arg$255$2);
                    .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanIntegerBy2130_.compareSpanIntegerBy2130(arg$255$0, arg$255$1, arg$255$2, arg$255$3, arg$255$4, arg$255$5);
                }
                returning null;
            );
            (
                let
                {
                    long arg$258$0 = .ceylon.language.runtime_.get_().getMaxIntegerValue();
                    long arg$258$1 = -2L;
                    long arg$258$2 = step;
                    .ceylon.language.Integer arg$258$4 = (
                        let
                        {
                            .ceylon.language.Integer $ceylontmp$ifResult$259;
                            if (step == 1L || step == 2L) {
                                $ceylontmp$ifResult$259 = .ceylon.language.Integer.instance(3L);
                            } else {
                                null;
                                $ceylontmp$ifResult$259 = null;
                            }
                        }
                        returning $ceylontmp$ifResult$259;
                    );
                    boolean arg$258$5 = false;
                    .ceylon.language.Sequential arg$258$3 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanIntegerBy2130_.compareSpanIntegerBy2130$expect(arg$258$0, arg$258$1, arg$258$2);
                    .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanIntegerBy2130_.compareSpanIntegerBy2130(arg$258$0, arg$258$1, arg$258$2, arg$258$3, arg$258$4, arg$258$5);
                }
                returning null;
            );
        }
        if (!loopentered$243) throw new .ceylon.language.AssertionError("nonempty Iterable with initial \'finished\' element");
        (
            let
            {
                int arg$261$0 = 0;
                int arg$261$1 = 0;
                .ceylon.language.Sequential arg$261$2 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanCharacter2130_.compareSpanCharacter2130$expect(arg$261$0, arg$261$1);
                .ceylon.language.Integer arg$261$3 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanCharacter2130_.compareSpanCharacter2130$breakAfter(arg$261$0, arg$261$1, arg$261$2);
                .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanCharacter2130_.compareSpanCharacter2130(arg$261$0, arg$261$1, arg$261$2, arg$261$3);
            }
            returning null;
        );
        .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanCharacter2130_.compareSpanCharacter2130(0, (
            let
            {
                int arg$262$callable$ = 0;
                long arg$262$0 = 1L;
            }
            returning .ceylon.language.Character.neighbour(arg$262$callable$, arg$262$0);
        ));
        (
            let
            {
                int arg$263$0 = 122;
                int arg$263$1 = 97;
                .ceylon.language.Sequential arg$263$2 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanCharacter2130_.compareSpanCharacter2130$expect(arg$263$0, arg$263$1);
                .ceylon.language.Integer arg$263$3 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanCharacter2130_.compareSpanCharacter2130$breakAfter(arg$263$0, arg$263$1, arg$263$2);
                .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanCharacter2130_.compareSpanCharacter2130(arg$263$0, arg$263$1, arg$263$2, arg$263$3);
            }
            returning null;
        );
        (
            let
            {
                int arg$264$0 = .ceylon.language.Character.neighbour(0, 1L);
                int arg$264$1 = 0;
                .ceylon.language.Sequential arg$264$2 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanCharacter2130_.compareSpanCharacter2130$expect(arg$264$0, arg$264$1);
                .ceylon.language.Integer arg$264$3 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanCharacter2130_.compareSpanCharacter2130$breakAfter(arg$264$0, arg$264$1, arg$264$2);
                .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanCharacter2130_.compareSpanCharacter2130(arg$264$0, arg$264$1, arg$264$2, arg$264$3);
            }
            returning null;
        );
        .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanCharacter2130_.compareSpanCharacter2130(.ceylon.language.Character.neighbour(0, 1L), (
            let
            {
                int arg$265$callable$ = 0;
                long arg$265$0 = 1L;
            }
            returning .ceylon.language.Character.neighbour(arg$265$callable$, arg$265$0);
        ));
        .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanCharacter2130_.compareSpanCharacter2130(1114111, 1114111);
        .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanCharacter2130_.compareSpanCharacter2130(0, 1114111);
        (
            let
            {
                int arg$266$0 = 97;
                int arg$266$1 = 122;
                .ceylon.language.Sequential arg$266$2 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanCharacter2130_.compareSpanCharacter2130$expect(arg$266$0, arg$266$1);
                .ceylon.language.Integer arg$266$3 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanCharacter2130_.compareSpanCharacter2130$breakAfter(arg$266$0, arg$266$1, arg$266$2);
                .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanCharacter2130_.compareSpanCharacter2130(arg$266$0, arg$266$1, arg$266$2, arg$266$3);
            }
            returning null;
        );
        (
            let
            {
                int arg$267$0 = 122;
                int arg$267$1 = 97;
                .ceylon.language.Sequential arg$267$2 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanCharacter2130_.compareSpanCharacter2130$expect(arg$267$0, arg$267$1);
                .ceylon.language.Integer arg$267$3 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanCharacter2130_.compareSpanCharacter2130$breakAfter(arg$267$0, arg$267$1, arg$267$2);
                .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanCharacter2130_.compareSpanCharacter2130(arg$267$0, arg$267$1, arg$267$2, arg$267$3);
            }
            returning null;
        );
        boolean loopentered$268 = false;
        .java.lang.Object elem$269;
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> step$iterator$$270 = ((.ceylon.language.Sequence<? extends .ceylon.language.Integer>).ceylon.language.Tuple.instance(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(-1L),
                .ceylon.language.Integer.instance(0L),
                .ceylon.language.Integer.instance(1L),
                .ceylon.language.Integer.instance(2L),
                .ceylon.language.Integer.instance(.ceylon.language.runtime_.get_().getMaxIntegerValue())})).iterator();
        loop_9: while (!((elem$269 = step$iterator$$270.next()) instanceof .ceylon.language.Finished)) {
            loopentered$268 = true;
            final long step = ((.ceylon.language.Integer)elem$269).longValue();
            (
                let
                {
                    int arg$271$0 = 97;
                    int arg$271$1 = 122;
                    long arg$271$2 = step;
                    .ceylon.language.Sequential arg$271$3 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanCharacterBy2130_.compareSpanCharacterBy2130$expect(arg$271$0, arg$271$1, arg$271$2);
                    .ceylon.language.Integer arg$271$4 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanCharacterBy2130_.compareSpanCharacterBy2130$breakAfter(arg$271$0, arg$271$1, arg$271$2, arg$271$3);
                    .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanCharacterBy2130_.compareSpanCharacterBy2130(arg$271$0, arg$271$1, arg$271$2, arg$271$3, arg$271$4);
                }
                returning null;
            );
            (
                let
                {
                    int arg$272$0 = 122;
                    int arg$272$1 = 97;
                    long arg$272$2 = step;
                    .ceylon.language.Sequential arg$272$3 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanCharacterBy2130_.compareSpanCharacterBy2130$expect(arg$272$0, arg$272$1, arg$272$2);
                    .ceylon.language.Integer arg$272$4 = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanCharacterBy2130_.compareSpanCharacterBy2130$breakAfter(arg$272$0, arg$272$1, arg$272$2, arg$272$3);
                    .com.redhat.ceylon.compiler.java.test.statement.loop.optim.compareSpanCharacterBy2130_.compareSpanCharacterBy2130(arg$272$0, arg$272$1, arg$272$2, arg$272$3, arg$272$4);
                }
                returning null;
            );
        }
        if (!loopentered$268) throw new .ceylon.language.AssertionError("nonempty Iterable with initial \'finished\' element");
    }
}