package com.redhat.ceylon.compiler.java.test.structure.attribute;

abstract class ClassAttributeWithConflictingMethods implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    
    ClassAttributeWithConflictingMethods() {
        this.attr = "";
    }
    private .java.lang.String attr;
    
    public final .java.lang.String getAttr() {
        return attr;
    }
    
    public final void setAttr(final .java.lang.String attr) {
        this.attr = attr;
    }
    
    public final boolean $isAttr() {
        return true;
    }
    
    public final .java.lang.String $getAttr() {
        return getAttr();
    }
    
    public final void $setAttr(final .java.lang.String attr) {
    }
    
    private final void m$priv$() {
        setAttr(getAttr());
        .com.redhat.ceylon.compiler.java.test.structure.attribute.ClassAttributeWithConflictingMethods.this.setAttr(.com.redhat.ceylon.compiler.java.test.structure.attribute.ClassAttributeWithConflictingMethods.this.getAttr());
        $setAttr($getAttr());
        .com.redhat.ceylon.compiler.java.test.structure.attribute.ClassAttributeWithConflictingMethods.this.$setAttr(.com.redhat.ceylon.compiler.java.test.structure.attribute.ClassAttributeWithConflictingMethods.this.$getAttr());
        $isAttr();
        .com.redhat.ceylon.compiler.java.test.structure.attribute.ClassAttributeWithConflictingMethods.this.$isAttr();
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.structure.attribute.ClassAttributeWithConflictingMethods.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.attribute.ClassAttributeWithConflictingMethods.class);
}
interface InterfaceAttributeWithConflictingMethods extends .com.redhat.ceylon.compiler.java.language.ObjectProxy {
    
    public abstract .java.lang.String getAttr();
    
    public abstract void setAttr(final .java.lang.String attr);
    
    public abstract boolean $isAttr();
    
    public abstract .java.lang.String $getAttr();
    
    public abstract .java.lang.Object $setAttr(final .java.lang.String attr);
    
    private default void m$priv$() {
        setAttr(getAttr());
        .com.redhat.ceylon.compiler.java.test.structure.attribute.InterfaceAttributeWithConflictingMethods.this.setAttr(.com.redhat.ceylon.compiler.java.test.structure.attribute.InterfaceAttributeWithConflictingMethods.this.getAttr());
        $setAttr($getAttr());
        .com.redhat.ceylon.compiler.java.test.structure.attribute.InterfaceAttributeWithConflictingMethods.this.$setAttr(.com.redhat.ceylon.compiler.java.test.structure.attribute.InterfaceAttributeWithConflictingMethods.this.$getAttr());
        $isAttr();
        .com.redhat.ceylon.compiler.java.test.structure.attribute.InterfaceAttributeWithConflictingMethods.this.$isAttr();
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.attribute.InterfaceAttributeWithConflictingMethods.class);
}