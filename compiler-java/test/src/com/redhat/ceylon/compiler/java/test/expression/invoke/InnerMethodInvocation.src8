package com.redhat.ceylon.compiler.java.test.expression.invoke;

public final class innerMethodInvocation_ {
    
    private innerMethodInvocation_() {
    }
    
    public static void innerMethodInvocation() {
        
        final class fib_ {
            
            private fib_() {
            }
            
            long fib(final long n) {
                if (n == 0L) {
                    return 1L;
                } else {
                    return n * fib_.this.fib(.ceylon.language.Integer.getPredecessor(n));
                }
            }
        }
        final fib_ fib = new fib_();
        final long $ceylontmp$first$3 = 0L;
        final long $ceylontmp$last$4 = 50L;
        final boolean $ceylontmp$increasing$5 = .ceylon.language.Integer.offset($ceylontmp$last$4, $ceylontmp$first$3) >= 0;
        final long $ceylontmp$incr$6 = $ceylontmp$increasing$5 ? 1L : -1L;
        long n$9 = $ceylontmp$first$3;
        long $ceylontmp$element$8 = $ceylontmp$first$3;
        boolean $ceylontmp$f$7 = false;
        loop_0: do {
            if ($ceylontmp$f$7) $ceylontmp$element$8 += $ceylontmp$incr$6;
            $ceylontmp$f$7 = true;
            n$9 = $ceylontmp$element$8;
            final long n = n$9;
            $ceylontmp$continue$2: do {
                .ceylon.language.print_.print(.ceylon.language.String.instance("n! = " + .ceylon.language.Integer.toString(fib.fib(n))));
            }             while (false);
        }         while ($ceylontmp$increasing$5 ? n$9 - $ceylontmp$last$4 != 0L : n$9 - $ceylontmp$last$4 != 0L);
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.expression.invoke.innerMethodInvocation_.innerMethodInvocation();
    }
}