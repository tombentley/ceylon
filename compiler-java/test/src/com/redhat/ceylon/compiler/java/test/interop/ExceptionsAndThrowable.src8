package com.redhat.ceylon.compiler.java.test.interop;

public class MyException extends .ceylon.language.Exception {
    
    public MyException() {
        super();
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.interop.MyException();
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.interop.MyException.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.interop.MyException.class);
}
public class MyError extends .java.lang.Error implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    public MyError() {
        super();
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.interop.MyError();
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.interop.MyError.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.interop.MyError.class);
}
public final class testExceptions_ {
    
    private testExceptions_() {
    }
    
    public static void testExceptions(final .java.lang.Exception param) {
        final .java.lang.Exception x = new .com.redhat.ceylon.compiler.java.test.interop.MyException();
        final .java.lang.Object o = x;
        .java.lang.Object o$1;
        if ((o$1 = o) instanceof .java.lang.Exception) {
            final .java.lang.Exception o$2 = (.java.lang.Exception)o$1;
        }
        try {
        } catch (final .java.lang.Exception z) {
        }
    }
}
public final class testThrowable_ {
    
    private testThrowable_() {
    }
    
    public static void testThrowable(final .com.redhat.ceylon.compiler.java.test.interop.JavaExceptionsAndThrowable j) {
        final .java.lang.Throwable t = .com.redhat.ceylon.compiler.java.Util.checkNull(j.throwable());
        if (2L > 1L) {
            throw new .ceylon.language.Exception(.ceylon.language.String.instance("error"), j.throwable());
        }
        .java.lang.Object t$5;
        if ((t$5 = t) instanceof .com.redhat.ceylon.compiler.java.test.interop.MyException) {
            final .com.redhat.ceylon.compiler.java.test.interop.MyException t$6 = (.com.redhat.ceylon.compiler.java.test.interop.MyException)t$5;
        }
        .java.lang.Object t$8;
        if ((t$8 = t) instanceof .java.lang.Error && !(t$8 instanceof .ceylon.language.AssertionError)) {
            final .java.lang.Error t$9 = (.java.lang.Error)t$8;
        }
        .java.lang.Object t$11;
        if ((t$11 = t) instanceof .java.lang.RuntimeException) {
            final .java.lang.RuntimeException t$12 = (.java.lang.RuntimeException)t$11;
        }
        .java.lang.Object t$14;
        if ((t$14 = t) instanceof .java.lang.Exception) {
            final .java.lang.Exception t$15 = (.java.lang.Exception)t$14;
        }
    }
}
public class ExceptionsAndThrowableRefinement extends .com.redhat.ceylon.compiler.java.test.interop.JavaExceptionsAndThrowable implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    public ExceptionsAndThrowableRefinement() {
        super();
    }
    
    @.java.lang.Override
    public final .java.lang.Throwable t(final .java.lang.Throwable x) {
        .java.lang.Throwable x$17;
        if ((x$17 = x) != null) {
            final .java.lang.Throwable x$19 = x$17;
            return x$19;
        } else {
            final .java.lang.Object x$18 = x$17;
            return (.java.lang.Throwable)(.java.lang.Object).ceylon.language.nothing_.get_();
        }
    }
    
    @.java.lang.Override
    public final .java.lang.Error e(final .java.lang.Error x) {
        .java.lang.Error x$21;
        if ((x$21 = x) != null) {
            final .java.lang.Error x$23 = x$21;
            return x$23;
        } else {
            final .java.lang.Object x$22 = x$21;
            return (.java.lang.Error)(.java.lang.Object).ceylon.language.nothing_.get_();
        }
    }
    
    @.java.lang.Override
    public final .java.lang.Exception x(final .java.lang.Exception x) {
        .java.lang.Exception x$25;
        if ((x$25 = x) != null) {
            final .java.lang.Exception x$27 = x$25;
            return x$27;
        } else {
            final .java.lang.Object x$26 = x$25;
            return (.java.lang.Exception)(.java.lang.Object).ceylon.language.nothing_.get_();
        }
    }
    
    @.java.lang.Override
    public final .java.lang.RuntimeException rtx(final .java.lang.RuntimeException x) {
        .java.lang.RuntimeException x$29;
        if ((x$29 = x) != null) {
            final .java.lang.RuntimeException x$31 = x$29;
            return x$31;
        } else {
            final .java.lang.Object x$30 = x$29;
            return (.java.lang.RuntimeException)(.java.lang.Object).ceylon.language.nothing_.get_();
        }
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.interop.ExceptionsAndThrowableRefinement();
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.interop.ExceptionsAndThrowableRefinement.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.interop.ExceptionsAndThrowableRefinement.class);
}