package com.redhat.ceylon.compiler.java.test.structure.concrete;

interface Iterable extends .com.redhat.ceylon.compiler.java.language.ObjectProxy {
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.concrete.Iterable.class);
}
class NameCollision implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .com.redhat.ceylon.compiler.java.test.structure.concrete.Iterable, .ceylon.language.Iterable<.ceylon.language.Integer, .java.lang.Object>, .java.io.Serializable {
    
    NameCollision() {
        this.empty = true;
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$ceylon$language$Iterable$Element() {
        return .ceylon.language.Integer.$TypeDescriptor$;
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$ceylon$language$Iterable$Absent() {
        return .ceylon.language.Null.$TypeDescriptor$;
    }
    
    @.java.lang.Override
    public .java.lang.String toString() {
        return .ceylon.language.Iterable.super.toString();
    }
    
    @.java.lang.Override
    public final .ceylon.language.Iterator<? extends .ceylon.language.Integer> iterator() {
        return (.ceylon.language.Iterator<? extends .ceylon.language.Integer>)(.java.lang.Object).ceylon.language.nothing_.get_();
    }
    private final boolean empty;
    
    @.java.lang.Override
    public final boolean getEmpty() {
        return empty;
    }
    
    @.java.lang.Override
    public final boolean contains(final .java.lang.Object element) {
        return false;
    }
    
    @.java.lang.Override
    public final .ceylon.language.Integer getFirst() {
        return (.ceylon.language.Integer)(.java.lang.Object).ceylon.language.nothing_.get_();
    }
    
    @.java.lang.Override
    public final .ceylon.language.Integer getLast() {
        return (.ceylon.language.Integer)(.java.lang.Object).ceylon.language.nothing_.get_();
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.structure.concrete.NameCollision.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.concrete.NameCollision.class);
}