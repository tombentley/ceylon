package com.redhat.ceylon.compiler.java.test.structure.iface;

interface InterfaceWithHigherOrder<Element> extends .com.redhat.ceylon.compiler.java.language.ObjectProxy {
    
    public abstract .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$com$redhat$ceylon$compiler$java$test$structure$iface$InterfaceWithHigherOrder$Element();
    
    public abstract .ceylon.language.Iterable<? extends Element, ? extends .java.lang.Object> getSource();
    
    public default <Result>.ceylon.language.Callable<? extends Result> fold(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final Result initial) {
        return new .com.redhat.ceylon.compiler.java.language.AbstractCallable<Result>($reified$Result, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, $reified$Result, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, $reified$Result, .com.redhat.ceylon.compiler.java.test.structure.iface.InterfaceWithHigherOrder.this.$reified$com$redhat$ceylon$compiler$java$test$structure$iface$InterfaceWithHigherOrder$Element()))), "Result(Result(Result, Element))", (short)-1){
            
            @.java.lang.Override
            public Result $call$(final .java.lang.Object $param$0) {
                final .ceylon.language.Callable<? extends Result> accumulating = (.ceylon.language.Callable<? extends Result>)(.ceylon.language.Callable)$param$0;
                Result partial = initial;
                final .ceylon.language.Iterable<? extends Element, ? extends .java.lang.Object> iterable$3 = .com.redhat.ceylon.compiler.java.test.structure.iface.InterfaceWithHigherOrder.this.getSource();
                final boolean isArray$4 = iterable$3 instanceof .ceylon.language.Array;
                final boolean isTuple$5 = iterable$3 instanceof .ceylon.language.Tuple && ((.ceylon.language.Tuple)iterable$3).$getArray$() != null;
                .java.lang.Object elem$1 = null;
                int i$6 = 0;
                final int length$7;
                if (isArray$4 || isTuple$5) {
                    length$7 = (int)iterable$3.getSize();
                } else {
                    length$7 = 0;
                }
                .ceylon.language.Iterator<? extends Element> elem$iterator$$2 = isTuple$5 || isArray$4 ? null : iterable$3.iterator();
                loop_0: while (isTuple$5 || isArray$4 ? i$6 < length$7 : !((elem$1 = elem$iterator$$2.next()) instanceof .ceylon.language.Finished)) {
                    if (isArray$4 || isTuple$5) elem$1 = iterable$3.getFromFirst(i$6++);
                    final Element elem = (Element)elem$1;
                    partial = accumulating.$call$((.java.lang.Object)partial, elem);
                }
                return partial;
            }
        };
    }
}