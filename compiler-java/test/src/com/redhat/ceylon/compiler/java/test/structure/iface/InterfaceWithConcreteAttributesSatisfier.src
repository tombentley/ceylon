package com.redhat.ceylon.compiler.java.test.structure.iface;

@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 8)
@.com.redhat.ceylon.compiler.java.metadata.SatisfiedTypes({"com.redhat.ceylon.compiler.java.test.structure.iface::InterfaceWithConcreteAttributes<ceylon.language::Integer>"})
class InterfaceWithConcreteAttributesSatisfier implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .com.redhat.ceylon.compiler.java.test.structure.iface.InterfaceWithConcreteAttributes<.ceylon.language.Integer>, .java.io.Serializable {
    
    InterfaceWithConcreteAttributesSatisfier() {
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$com$redhat$ceylon$compiler$java$test$structure$iface$InterfaceWithConcreteAttributes$T() {
        return .ceylon.language.Integer.$TypeDescriptor$;
    }
    
    @.ceylon.language.SharedAnnotation$annotation$
    @.ceylon.language.ActualAnnotation$annotation$
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    @.com.redhat.ceylon.compiler.java.metadata.Transient
    public final long getFormalAttribute() {
        return 1L;
    }
    
    @.ceylon.language.SharedAnnotation$annotation$
    @.ceylon.language.ActualAnnotation$annotation$
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    @.com.redhat.ceylon.compiler.java.metadata.Transient
    public final long getFormalAttribute2() {
        return 2L;
    }
    
    @.java.lang.Override
    public final void setFormalAttribute2(@.com.redhat.ceylon.compiler.java.metadata.Name("formalAttribute2")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    final long formalAttribute2) {
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.structure.iface.InterfaceWithConcreteAttributesSatisfier.$TypeDescriptor$;
    }
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.iface.InterfaceWithConcreteAttributesSatisfier.class);
}