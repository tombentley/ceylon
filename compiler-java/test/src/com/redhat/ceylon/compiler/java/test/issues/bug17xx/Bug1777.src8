package com.redhat.ceylon.compiler.java.test.issues.bug17xx;

public interface Bug1777<Element> extends .ceylon.language.Iterable<Element, .java.lang.Object> {
    
    @.java.lang.Override
    public default .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$ceylon$language$Iterable$Element() {
        return .com.redhat.ceylon.compiler.java.test.issues.bug17xx.Bug1777.this.$reified$com$redhat$ceylon$compiler$java$test$issues$bug17xx$Bug1777$Element();
    }
    
    @.java.lang.Override
    public default .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$ceylon$language$Iterable$Absent() {
        return .ceylon.language.Null.$TypeDescriptor$;
    }
    
    public abstract .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$com$redhat$ceylon$compiler$java$test$issues$bug17xx$Bug1777$Element();
    
    public default <Result>.ceylon.language.Callable<? extends Result> foldd(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final Result initial) {
        return new .com.redhat.ceylon.compiler.java.language.AbstractCallable<Result>($reified$Result, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, $reified$Result, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, $reified$Result, .com.redhat.ceylon.compiler.java.test.issues.bug17xx.Bug1777.this.$reified$com$redhat$ceylon$compiler$java$test$issues$bug17xx$Bug1777$Element()))), "Result(Result(Result, Element))", (short)-1){
            
            @.java.lang.Override
            public Result $call$(final .java.lang.Object $param$0) {
                final .ceylon.language.Callable<? extends Result> accumulating = (.ceylon.language.Callable<? extends Result>)(.ceylon.language.Callable)$param$0;
                Result partial = initial;
                .java.lang.Object elem$1;
                .ceylon.language.Iterator<? extends Element> elem$iterator$$2 = .com.redhat.ceylon.compiler.java.test.issues.bug17xx.Bug1777.this.iterator();
                loop_0: while (!((elem$1 = elem$iterator$$2.next()) instanceof .ceylon.language.Finished)) {
                    final Element elem = (Element)elem$1;
                    partial = accumulating.$call$((.java.lang.Object)partial, elem);
                }
                return partial;
            }
        };
    }
    
    public abstract <Result>.ceylon.language.Callable<? extends Result> foldFormal(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final Result initial);
}
public abstract class Bug1777_Impl<Element> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .com.redhat.ceylon.compiler.java.test.issues.bug17xx.Bug1777<Element>, .java.io.Serializable {
    
    public Bug1777_Impl(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Element) {
        this.$reified$Element = $reified$Element;
    }
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Element;
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$com$redhat$ceylon$compiler$java$test$issues$bug17xx$Bug1777$Element() {
        return $reified$Element;
    }
    
    @.java.lang.Override
    public .java.lang.String toString() {
        return .ceylon.language.Iterable.toString(.com.redhat.ceylon.compiler.java.test.issues.bug17xx.Bug1777_Impl.this);
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.issues.bug17xx.Bug1777_Impl.class, $reified$Element);
    }
}
public abstract class Bug1777_2<Element> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .ceylon.language.Iterable<Element, .java.lang.Object>, .java.io.Serializable {
    
    public Bug1777_2(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Element) {
        this.$reified$Element = $reified$Element;
    }
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Element;
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$ceylon$language$Iterable$Element() {
        return $reified$Element;
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$ceylon$language$Iterable$Absent() {
        return .ceylon.language.Null.$TypeDescriptor$;
    }
    
    @.java.lang.Override
    public .java.lang.String toString() {
        return .ceylon.language.Iterable.super.toString();
    }
    
    public <Result>.ceylon.language.Callable<? extends Result> foldd(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final Result initial) {
        return new .com.redhat.ceylon.compiler.java.language.AbstractCallable<Result>($reified$Result, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, $reified$Result, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, $reified$Result, $reified$Element))), "Result(Result(Result, Element))", (short)-1){
            
            @.java.lang.Override
            public Result $call$(final .java.lang.Object $param$0) {
                final .ceylon.language.Callable<? extends Result> accumulating = (.ceylon.language.Callable<? extends Result>)(.ceylon.language.Callable)$param$0;
                Result partial = initial;
                .java.lang.Object elem$4;
                .ceylon.language.Iterator<? extends Element> elem$iterator$$5 = .com.redhat.ceylon.compiler.java.test.issues.bug17xx.Bug1777_2.this.iterator();
                loop_1: while (!((elem$4 = elem$iterator$$5.next()) instanceof .ceylon.language.Finished)) {
                    final Element elem = (Element)elem$4;
                    partial = accumulating.$call$((.java.lang.Object)partial, elem);
                }
                return partial;
            }
        };
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.issues.bug17xx.Bug1777_2.class, $reified$Element);
    }
}