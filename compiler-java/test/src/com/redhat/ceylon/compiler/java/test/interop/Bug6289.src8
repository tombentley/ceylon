package com.redhat.ceylon.compiler.java.test.interop;

@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 8)
@.com.redhat.ceylon.compiler.java.metadata.Method
final class bug6289_ {
    
    private bug6289_() {
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Anything")
    static void bug6289() {
        .ceylon.language.print_.print((
            let
            {
                .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> safe$0 = (
                    let
                    {
                        .ceylon.language.String safe$1 = (
                            let
                            {
                                .java.lang.String $ceylontmp$2 = new .java.io.File("hello").getAbsolutePath();
                            }
                            returning $ceylontmp$2 != null ? .ceylon.language.String.instance($ceylontmp$2) : null;
                        );
                    }
                    returning safe$1 != null ? safe$1.split((
                        let
                        {
                            final int $instance$ = 47;
                        }
                        returning new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Boolean>(.ceylon.language.Boolean.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.Object.$TypeDescriptor$), "Boolean(Object)", (short)-1){
                            
                            @.java.lang.Override
                            @.com.redhat.ceylon.compiler.java.metadata.Ignore
                            public .ceylon.language.Boolean $call$(final .java.lang.Object $param$0) {
                                final .java.lang.Object $ceylontmp$that = $param$0;
                                return .ceylon.language.Boolean.instance(.ceylon.language.Character.equals($instance$, $ceylontmp$that));
                            }
                        };
                    )) : null;
                );
            }
            returning safe$0 != null ? safe$0.sequence() : null;
        ));
    }
}