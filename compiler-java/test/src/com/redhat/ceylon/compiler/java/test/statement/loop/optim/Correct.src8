package com.redhat.ceylon.compiler.java.test.statement.loop.optim;

@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 8)
@.com.redhat.ceylon.compiler.java.metadata.Members({@.com.redhat.ceylon.compiler.java.metadata.Member(klass = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal.class)})
class Correct implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    
    Correct() {
        final long expected = 55L;
        if (expected == notOptimizedIteration$priv$()) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == notOptimizedIteration()"));
        }
        if (expected == rangeOpIteration$priv$()) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == rangeOpIteration()"));
        }
        if (expected == rangeOpIterationReverse$priv$()) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == rangeOpIterationReverse()"));
        }
        if (expected == rangeIteration$priv$()) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == rangeIteration()"));
        }
        if (expected == rangeIterationReverse$priv$()) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == rangeIterationReverse()"));
        }
        if (expected == rangeIteration2$priv$()) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == rangeIteration2()"));
        }
        if (expected == rangeIterationReverse2$priv$()) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == rangeIterationReverse2()"));
        }
        if (expected == arrayIterationStatic$priv$()) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == arrayIterationStatic()"));
        }
        if (expected == javaArrayIterationStatic$priv$()) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == javaArrayIterationStatic()"));
        }
        if (expected == tupleIterationStatic$priv$()) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == tupleIterationStatic()"));
        }
        if (expected == rangeIterationDynamic$priv$()) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == rangeIterationDynamic()"));
        }
        if (expected == arrayIterationDynamic$priv$()) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == arrayIterationDynamic()"));
        }
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    private final long notOptimizedIteration$priv$() {
        long sum = 0L;
        boolean loopentered$0 = false;
        .java.lang.Object elem$1;
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> i$iterator$$2 = .ceylon.language.span_.<.ceylon.language.Integer>span(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(10L)).iterator();
        loop_0: while (!((elem$1 = i$iterator$$2.next()) instanceof .ceylon.language.Finished)) {
            loopentered$0 = true;
            final long i = ((.ceylon.language.Integer)elem$1).longValue();
            sum += i;
        }
        if (!loopentered$0) throw new .ceylon.language.AssertionError("nonempty Iterable with initial \'finished\' element");
        return sum;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    private final long rangeOpIteration$priv$() {
        long sum = 0L;
        final long $ceylontmp$first$6 = 1L;
        final long $ceylontmp$last$7 = 10L;
        final boolean $ceylontmp$increasing$8 = .ceylon.language.Integer.offset($ceylontmp$last$7, $ceylontmp$first$6) >= 0;
        final long $ceylontmp$incr$9 = $ceylontmp$increasing$8 ? 1L : -1L;
        long i$12 = $ceylontmp$first$6;
        long $ceylontmp$element$11 = $ceylontmp$first$6;
        boolean $ceylontmp$f$10 = false;
        loop_1: do {
            if ($ceylontmp$f$10) $ceylontmp$element$11 += $ceylontmp$incr$9;
            $ceylontmp$f$10 = true;
            i$12 = $ceylontmp$element$11;
            final long i = i$12;
            $ceylontmp$continue$5: do {
                sum += i;
            }             while (false);
        }         while ($ceylontmp$increasing$8 ? i$12 - $ceylontmp$last$7 != 0L : i$12 - $ceylontmp$last$7 != 0L);
        return sum;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    private final long rangeOpIterationReverse$priv$() {
        long sum = 0L;
        final long $ceylontmp$first$16 = 10L;
        final long $ceylontmp$last$17 = 1L;
        final boolean $ceylontmp$increasing$18 = .ceylon.language.Integer.offset($ceylontmp$last$17, $ceylontmp$first$16) >= 0;
        final long $ceylontmp$incr$19 = $ceylontmp$increasing$18 ? 1L : -1L;
        long i$22 = $ceylontmp$first$16;
        long $ceylontmp$element$21 = $ceylontmp$first$16;
        boolean $ceylontmp$f$20 = false;
        loop_2: do {
            if ($ceylontmp$f$20) $ceylontmp$element$21 += $ceylontmp$incr$19;
            $ceylontmp$f$20 = true;
            i$22 = $ceylontmp$element$21;
            final long i = i$22;
            $ceylontmp$continue$15: do {
                sum += i;
            }             while (false);
        }         while ($ceylontmp$increasing$18 ? i$22 - $ceylontmp$last$17 != 0L : i$22 - $ceylontmp$last$17 != 0L);
        return sum;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    private final long rangeIteration$priv$() {
        long sum = 0L;
        final .ceylon.language.Range<.ceylon.language.Integer> range = .ceylon.language.span_.<.ceylon.language.Integer>span(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(10L));
        boolean loopentered$24 = false;
        .java.lang.Object elem$25;
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> i$iterator$$26 = range.iterator();
        loop_3: while (!((elem$25 = i$iterator$$26.next()) instanceof .ceylon.language.Finished)) {
            loopentered$24 = true;
            final long i = ((.ceylon.language.Integer)elem$25).longValue();
            sum += i;
        }
        if (!loopentered$24) throw new .ceylon.language.AssertionError("nonempty Iterable with initial \'finished\' element");
        return sum;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    private final long rangeIterationReverse$priv$() {
        long sum = 0L;
        final .ceylon.language.Range<.ceylon.language.Integer> range = .ceylon.language.span_.<.ceylon.language.Integer>span(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(10L));
        boolean loopentered$28 = false;
        .java.lang.Object elem$29;
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> i$iterator$$30 = range.iterator();
        loop_4: while (!((elem$29 = i$iterator$$30.next()) instanceof .ceylon.language.Finished)) {
            loopentered$28 = true;
            final long i = ((.ceylon.language.Integer)elem$29).longValue();
            sum += i;
        }
        if (!loopentered$28) throw new .ceylon.language.AssertionError("nonempty Iterable with initial \'finished\' element");
        return sum;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 8)
    @.com.redhat.ceylon.compiler.java.metadata.Name("MyOrdinal")
    @.com.redhat.ceylon.compiler.java.metadata.Container(klass = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.class)
    @.com.redhat.ceylon.compiler.java.metadata.SatisfiedTypes({"ceylon.language::Enumerable<com.redhat.ceylon.compiler.java.test.statement.loop.optim::Correct.MyOrdinal>"})
    class MyOrdinal implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .ceylon.language.Enumerable<.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal>, .java.io.Serializable {
        
        MyOrdinal(@.com.redhat.ceylon.compiler.java.metadata.Name("i")
        @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
        @.ceylon.language.SharedAnnotation$annotation$
        final long i) {
            this.i = i;
        }
        @.com.redhat.ceylon.compiler.java.metadata.Ignore
        private final long i;
        
        @.ceylon.language.SharedAnnotation$annotation$
        @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
        public final long getI() {
            return i;
        }
        
        @.java.lang.Override
        @.com.redhat.ceylon.compiler.java.metadata.Ignore
        public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$ceylon$language$Enumerable$Other() {
            return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal.class));
        }
        
        @.ceylon.language.SharedAnnotation$annotation$
        @.ceylon.language.ActualAnnotation$annotation$
        @.java.lang.Override
        @.com.redhat.ceylon.compiler.java.metadata.TypeInfo(
                value = "com.redhat.ceylon.compiler.java.test.statement.loop.optim::Correct.MyOrdinal",
                erased = true,
                untrusted = true)
        public final .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal neighbour(@.com.redhat.ceylon.compiler.java.metadata.Name("n")
        @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
        final long n) {
            return new .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal(getI() + n);
        }
        
        @.ceylon.language.SharedAnnotation$annotation$
        @.ceylon.language.ActualAnnotation$annotation$
        @.java.lang.Override
        @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
        public final long offset(@.com.redhat.ceylon.compiler.java.metadata.Name("other")
        @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("com.redhat.ceylon.compiler.java.test.statement.loop.optim::Correct.MyOrdinal")
        final .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal other) {
            return getI() - other.getI();
        }
        
        @.java.lang.Override
        @.com.redhat.ceylon.compiler.java.metadata.Ignore
        public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
            return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal.class));
        }
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    private final long rangeIteration2$priv$() {
        long sum = 0L;
        final .ceylon.language.Range<.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal> range = .ceylon.language.span_.<.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal>span(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal.class)), new .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal(1L), new .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal(10L));
        boolean loopentered$32 = false;
        .java.lang.Object elem$33;
        .ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal> i$iterator$$34 = range.iterator();
        loop_5: while (!((elem$33 = i$iterator$$34.next()) instanceof .ceylon.language.Finished)) {
            loopentered$32 = true;
            final .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal i = (.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal)elem$33;
            sum += i.getI();
        }
        if (!loopentered$32) throw new .ceylon.language.AssertionError("nonempty Iterable with initial \'finished\' element");
        return sum;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    private final long rangeIterationReverse2$priv$() {
        long sum = 0L;
        final .ceylon.language.Range<.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal> range = .ceylon.language.span_.<.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal>span(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal.class)), new .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal(10L), new .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal(1L));
        boolean loopentered$36 = false;
        .java.lang.Object elem$37;
        .ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal> i$iterator$$38 = range.iterator();
        loop_6: while (!((elem$37 = i$iterator$$38.next()) instanceof .ceylon.language.Finished)) {
            loopentered$36 = true;
            final .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal i = (.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal)elem$37;
            sum += i.getI();
        }
        if (!loopentered$36) throw new .ceylon.language.AssertionError("nonempty Iterable with initial \'finished\' element");
        return sum;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    private final long arrayIterationStatic$priv$() {
        final .ceylon.language.Array<.ceylon.language.Integer> array = new .ceylon.language.Array<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.span_.<.ceylon.language.Integer>span(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(0L), .ceylon.language.Integer.instance(10L)));
        long sum = 0L;
        final .java.lang.Object array$41 = array.toArray();
        final int length$42 = .com.redhat.ceylon.compiler.java.Util.arrayLength(array$41);
        loop_7: for (int i$43 = 0; i$43 < length$42; i$43++) {
            final long i = .com.redhat.ceylon.compiler.java.Util.getIntegerArray(array$41, i$43);
            sum += i;
        }
        return sum;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    private final long javaArrayIterationStatic$priv$() {
        final int[] array = new int[10];
        final long $ceylontmp$first$47 = 1L;
        final long $ceylontmp$last$48 = 10L;
        final boolean $ceylontmp$increasing$49 = .ceylon.language.Integer.offset($ceylontmp$last$48, $ceylontmp$first$47) >= 0;
        final long $ceylontmp$incr$50 = $ceylontmp$increasing$49 ? 1L : -1L;
        long index$53 = $ceylontmp$first$47;
        long $ceylontmp$element$52 = $ceylontmp$first$47;
        boolean $ceylontmp$f$51 = false;
        loop_8: do {
            if ($ceylontmp$f$51) $ceylontmp$element$52 += $ceylontmp$incr$50;
            $ceylontmp$f$51 = true;
            index$53 = $ceylontmp$element$52;
            final long index = index$53;
            $ceylontmp$continue$46: do {
                array[.com.redhat.ceylon.compiler.java.Util.toInt(index - 1)] = .com.redhat.ceylon.compiler.java.Util.toInt(index);
            }             while (false);
        }         while ($ceylontmp$increasing$49 ? index$53 - $ceylontmp$last$48 != 0L : index$53 - $ceylontmp$last$48 != 0L);
        long sum = 0L;
        final int[] array$55 = array;
        loop_9: for (int i$57 = 0; i$57 < array$55.length; i$57++) {
            final long i = array$55[i$57];
            sum += i;
        }
        return sum;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    private final long tupleIterationStatic$priv$() {
        final .ceylon.language.Sequence<? extends .ceylon.language.Integer> array = (.ceylon.language.Sequence<? extends .ceylon.language.Integer>).ceylon.language.Tuple.instance(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(0L),
                .ceylon.language.Integer.instance(1L),
                .ceylon.language.Integer.instance(2L),
                .ceylon.language.Integer.instance(3L),
                .ceylon.language.Integer.instance(4L),
                .ceylon.language.Integer.instance(5L),
                .ceylon.language.Integer.instance(6L),
                .ceylon.language.Integer.instance(7L),
                .ceylon.language.Integer.instance(8L),
                .ceylon.language.Integer.instance(9L),
                .ceylon.language.Integer.instance(10L)});
        long sum = 0L;
        boolean loopentered$59 = false;
        .java.lang.Object elem$60;
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> i$iterator$$61 = array.iterator();
        loop_10: while (!((elem$60 = i$iterator$$61.next()) instanceof .ceylon.language.Finished)) {
            loopentered$59 = true;
            final long i = ((.ceylon.language.Integer)elem$60).longValue();
            sum += i;
        }
        if (!loopentered$59) throw new .ceylon.language.AssertionError("nonempty Iterable with initial \'finished\' element");
        return sum;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    private final long iterationDynamic$priv$(@.com.redhat.ceylon.compiler.java.metadata.Name("iterable")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("{ceylon.language::Integer*}")
    final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> iterable) {
        long sum = 0L;
        final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> iterable$66 = iterable;
        final boolean isArray$67 = iterable$66 instanceof .ceylon.language.Array;
        final boolean isTuple$68 = iterable$66 instanceof .ceylon.language.Tuple && ((.ceylon.language.Tuple)iterable$66).$getArray$() != null;
        .java.lang.Object elem$64 = null;
        int i$69 = 0;
        final int length$70;
        if (isArray$67 || isTuple$68) {
            length$70 = (int)iterable$66.getSize();
        } else {
            length$70 = 0;
        }
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> i$iterator$$65 = isTuple$68 || isArray$67 ? null : iterable$66.iterator();
        loop_11: while (isTuple$68 || isArray$67 ? i$69 < length$70 : !((elem$64 = i$iterator$$65.next()) instanceof .ceylon.language.Finished)) {
            if (isArray$67 || isTuple$68) elem$64 = iterable$66.getFromFirst(i$69++);
            final long i = ((.ceylon.language.Integer)elem$64).longValue();
            sum += i;
        }
        return sum;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    private final long rangeIterationDynamic$priv$() {
        final .ceylon.language.Range<.ceylon.language.Integer> iterable = .ceylon.language.span_.<.ceylon.language.Integer>span(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(0L), .ceylon.language.Integer.instance(10L));
        return iterationDynamic$priv$(iterable);
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    private final long arrayIterationDynamic$priv$() {
        final .ceylon.language.Array<.ceylon.language.Integer> iterable = new .ceylon.language.Array<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.span_.<.ceylon.language.Integer>span(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(0L), .ceylon.language.Integer.instance(10L)));
        return iterationDynamic$priv$(iterable);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.$TypeDescriptor$;
    }
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.class);
}