package com.redhat.ceylon.compiler.java.test.interop;

final class testFiles_ {
    
    private testFiles_() {
    }
    
    static void testFiles() {
        final .java.io.File f = new .java.io.File(".");
        final .java.io.File[] items = .com.redhat.ceylon.compiler.java.Util.checkNull(f.listFiles());
        final .java.io.File f2 = items[0];
    }
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 8)
@.com.redhat.ceylon.compiler.java.metadata.Method
final class booleanArray_ {
    
    private booleanArray_() {
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("java.lang::BooleanArray")
    static boolean[] booleanArray(@.com.redhat.ceylon.compiler.java.metadata.Name("values")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("{ceylon.language::Boolean*}")
    final .ceylon.language.Iterable<? extends .ceylon.language.Boolean, ? extends .java.lang.Object> values) {
        final boolean[] ret = new boolean[.com.redhat.ceylon.compiler.java.Util.toInt(values.getSize())];
        long idx = 0L;
        .java.lang.Object elem$1;
        .ceylon.language.Iterator<? extends .ceylon.language.Boolean> val$iterator$$2 = values.iterator();
        loop_0: while (!((elem$1 = val$iterator$$2.next()) instanceof .ceylon.language.Finished)) {
            final boolean val = ((.ceylon.language.Boolean)elem$1).booleanValue();
            ret[.com.redhat.ceylon.compiler.java.Util.toInt(idx++)] = val;
        }
        return ret;
    }
}
final class test_booleans_ {
    
    private test_booleans_() {
    }
    
    static void test_booleans() {
        final .com.redhat.ceylon.compiler.java.test.interop.TypesJava java = new .com.redhat.ceylon.compiler.java.test.interop.TypesJava();
        final boolean[] items = .com.redhat.ceylon.compiler.java.Util.checkNull(java.return_booleans());
        final .ceylon.language.Boolean b = .ceylon.language.Boolean.instance(items[0]);
        .ceylon.language.Boolean b$4;
        if ((b$4 = b) != null) {
            final boolean b$5 = b$4.booleanValue();
            items[1] = b$5;
        }
        final .ceylon.language.Iterable<? extends .ceylon.language.Character, ? extends .java.lang.Object> it = .ceylon.language.String.instance("foo");
        java.take_booleans(items);
        java.take_booleans(.com.redhat.ceylon.compiler.java.test.interop.booleanArray_.booleanArray((.ceylon.language.Sequence<? extends .ceylon.language.Boolean>).ceylon.language.Tuple.instance(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.true_.$TypeDescriptor$, .ceylon.language.false_.$TypeDescriptor$), new .java.lang.Object[]{
                .ceylon.language.Boolean.instance(true),
                .ceylon.language.Boolean.instance(true),
                .ceylon.language.Boolean.instance(false)})));
        java.take_booleans((
            let
            {
                .ceylon.language.Iterable arg$6$0 = (.ceylon.language.Iterable).ceylon.language.empty_.get_();
            }
            returning .com.redhat.ceylon.compiler.java.test.interop.booleanArray_.booleanArray(arg$6$0);
        ));
        (
            let
            {
                int arg$7$0 = 2;
            }
            returning new boolean[arg$7$0];
        );
        new boolean[2];
        final .ceylon.language.Callable<? extends .java.lang.Object> ctorRef = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<boolean[]>(.com.redhat.ceylon.compiler.java.language.BooleanArray.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, 1, .ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Boolean.$TypeDescriptor$), "BooleanArray(Integer, Boolean=)", (short)-1){
            
            @.java.lang.Override
            public boolean[] $call$(final .java.lang.Object $param$0) {
                final int $ceylontmp$size = .com.redhat.ceylon.compiler.java.Util.toInt(((.ceylon.language.Integer)$param$0).longValue());
                return new boolean[$ceylontmp$size];
            }
            
            @.java.lang.Override
            public boolean[] $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                final int $ceylontmp$size = .com.redhat.ceylon.compiler.java.Util.toInt(((.ceylon.language.Integer)$param$0).longValue());
                final boolean $ceylontmp$element = ((.ceylon.language.Boolean)$param$1).booleanValue();
                return .com.redhat.ceylon.compiler.java.Util.fillArray(new boolean[$ceylontmp$size], $ceylontmp$element);
            }
        };
        final long i = items.length;
        final .ceylon.language.Array<.ceylon.language.Boolean> arr1 = .com.redhat.ceylon.compiler.java.language.BooleanArray.getBooleanArray(items);
        final .ceylon.language.Array<.java.lang.Boolean> arr2 = .com.redhat.ceylon.compiler.java.language.BooleanArray.getArray(items);
        .com.redhat.ceylon.compiler.java.language.BooleanArray.copyTo(items, items);
        .com.redhat.ceylon.compiler.java.language.BooleanArray.copyTo(items, items, 0, 0, items.length);
        (
            let
            {
                boolean[] arg$8$callable$ = items;
                boolean[] arg$8$argthis$ = arg$8$callable$;
                boolean[] arg$8$0 = items;
                int arg$8$1 = 0;
                int arg$8$2 = 0;
                int arg$8$3 = arg$8$argthis$.length;
                .com.redhat.ceylon.compiler.java.language.BooleanArray.copyTo(arg$8$callable$, arg$8$0, arg$8$1, arg$8$2, arg$8$3);
            }
            returning null;
        );
        (
            let
            {
                boolean[] arg$9$callable$ = items;
                boolean[] arg$9$argthis$ = arg$9$callable$;
                boolean[] arg$9$0 = items;
                int arg$9$1 = 0;
                int arg$9$2 = 0;
                int arg$9$3 = arg$9$argthis$.length;
                .com.redhat.ceylon.compiler.java.language.BooleanArray.copyTo(arg$9$callable$, arg$9$0, arg$9$1, arg$9$2, arg$9$3);
            }
            returning null;
        );
        final boolean[][] matrix = new boolean[10][];
        .java.lang.Object elem$11;
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> x$iterator$$12 = ((.ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object>)(.ceylon.language.Iterable).ceylon.language.measure_.<.ceylon.language.Integer>measure(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(0L), matrix.length)).iterator();
        loop_1: while (!((elem$11 = x$iterator$$12.next()) instanceof .ceylon.language.Finished)) {
            final long x = ((.ceylon.language.Integer)elem$11).longValue();
            matrix[.com.redhat.ceylon.compiler.java.Util.toInt(x)] = new boolean[2];
        }
        final .ceylon.language.Array<boolean[]> boolArray = .com.redhat.ceylon.compiler.java.language.ObjectArray<? extends boolean[]>.getArray(matrix);
        final .java.lang.Object o = items;
        .java.lang.Object o$14;
        if ((o$14 = o) instanceof boolean[]) {
            final boolean[] o$15 = (boolean[])o$14;
        }
        .java.lang.Object o$17;
        if ((o$17 = o) instanceof boolean[][]) {
            final boolean[][] o$18 = (boolean[][])(boolean[][])o$17;
        }
        .java.lang.Object o$20;
        if ((o$20 = o) instanceof .ceylon.language.Boolean[][]) {
            final .ceylon.language.Boolean[][] o$21 = (.ceylon.language.Boolean[][])(.ceylon.language.Boolean[][])o$20;
        }
        final boolean[] cloned = .com.redhat.ceylon.compiler.java.language.BooleanArray.$clone(items);
    }
}
final class test_JBooleans_ {
    
    private test_JBooleans_() {
    }
    
    static void test_JBooleans() {
        final .com.redhat.ceylon.compiler.java.test.interop.TypesJava java = new .com.redhat.ceylon.compiler.java.test.interop.TypesJava();
        final .java.lang.Boolean[] items = .com.redhat.ceylon.compiler.java.Util.checkNull(java.return_Booleans());
        final .java.lang.Boolean b = items[0];
        .java.lang.Boolean b$23;
        if ((b$23 = b) != null) {
            final .java.lang.Boolean b$24 = b$23;
            items[1] = b$24;
        }
        java.take_Booleans(items);
    }
}
final class test_bytes_ {
    
    private test_bytes_() {
    }
    
    static void test_bytes() {
        final .com.redhat.ceylon.compiler.java.test.interop.TypesJava java = new .com.redhat.ceylon.compiler.java.test.interop.TypesJava();
        final byte[] items = .com.redhat.ceylon.compiler.java.Util.checkNull(java.return_bytes());
        final .ceylon.language.Byte n = .ceylon.language.Byte.instance(items[0]);
        .ceylon.language.Byte n$26;
        if ((n$26 = n) != null) {
            final byte n$27 = n$26.byteValue();
            items[1] = n$27;
        }
        java.take_bytes(items);
        new byte[2];
        final .ceylon.language.Callable<? extends .java.lang.Object> ctorRef = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<byte[]>(.com.redhat.ceylon.compiler.java.language.ByteArray.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, 1, .ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Byte.$TypeDescriptor$), "ByteArray(Integer, Byte=)", (short)-1){
            
            @.java.lang.Override
            public byte[] $call$(final .java.lang.Object $param$0) {
                final int $ceylontmp$size = .com.redhat.ceylon.compiler.java.Util.toInt(((.ceylon.language.Integer)$param$0).longValue());
                return new byte[$ceylontmp$size];
            }
            
            @.java.lang.Override
            public byte[] $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                final int $ceylontmp$size = .com.redhat.ceylon.compiler.java.Util.toInt(((.ceylon.language.Integer)$param$0).longValue());
                final byte $ceylontmp$element = ((.ceylon.language.Byte)$param$1).byteValue();
                return .com.redhat.ceylon.compiler.java.Util.fillArray(new byte[$ceylontmp$size], $ceylontmp$element);
            }
        };
        final byte[] cloned = .com.redhat.ceylon.compiler.java.language.ByteArray.$clone(items);
    }
}
final class test_JBytes_ {
    
    private test_JBytes_() {
    }
    
    static void test_JBytes() {
        final .com.redhat.ceylon.compiler.java.test.interop.TypesJava java = new .com.redhat.ceylon.compiler.java.test.interop.TypesJava();
        final .java.lang.Byte[] items = .com.redhat.ceylon.compiler.java.Util.checkNull(java.return_Bytes());
        final .java.lang.Byte n = items[0];
        .java.lang.Byte n$29;
        if ((n$29 = n) != null) {
            final .java.lang.Byte n$30 = n$29;
            items[1] = n$30;
        }
        java.take_Bytes(items);
    }
}
final class test_shorts_ {
    
    private test_shorts_() {
    }
    
    static void test_shorts() {
        final .com.redhat.ceylon.compiler.java.test.interop.TypesJava java = new .com.redhat.ceylon.compiler.java.test.interop.TypesJava();
        final short[] items = .com.redhat.ceylon.compiler.java.Util.checkNull(java.return_shorts());
        final .ceylon.language.Integer n = .ceylon.language.Integer.instance(items[0]);
        .ceylon.language.Integer n$32;
        if ((n$32 = n) != null) {
            final long n$33 = n$32.longValue();
            items[1] = .com.redhat.ceylon.compiler.java.Util.toShort(n$33);
        }
        java.take_shorts(items);
        new short[2];
        final .ceylon.language.Callable<? extends .java.lang.Object> ctorRef = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<short[]>(.com.redhat.ceylon.compiler.java.language.ShortArray.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, 1, .ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.$TypeDescriptor$), "ShortArray(Integer, Integer=)", (short)-1){
            
            @.java.lang.Override
            public short[] $call$(final .java.lang.Object $param$0) {
                final int $ceylontmp$size = .com.redhat.ceylon.compiler.java.Util.toInt(((.ceylon.language.Integer)$param$0).longValue());
                return new short[$ceylontmp$size];
            }
            
            @.java.lang.Override
            public short[] $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                final int $ceylontmp$size = .com.redhat.ceylon.compiler.java.Util.toInt(((.ceylon.language.Integer)$param$0).longValue());
                final short $ceylontmp$element = .com.redhat.ceylon.compiler.java.Util.toShort(((.ceylon.language.Integer)$param$1).longValue());
                return .com.redhat.ceylon.compiler.java.Util.fillArray(new short[$ceylontmp$size], $ceylontmp$element);
            }
        };
        final short[] cloned = .com.redhat.ceylon.compiler.java.language.ShortArray.$clone(items);
    }
}
final class test_JShorts_ {
    
    private test_JShorts_() {
    }
    
    static void test_JShorts() {
        final .com.redhat.ceylon.compiler.java.test.interop.TypesJava java = new .com.redhat.ceylon.compiler.java.test.interop.TypesJava();
        final .java.lang.Short[] items = .com.redhat.ceylon.compiler.java.Util.checkNull(java.return_Shorts());
        final .java.lang.Short n = items[0];
        .java.lang.Short n$35;
        if ((n$35 = n) != null) {
            final .java.lang.Short n$36 = n$35;
            items[1] = n$36;
        }
        java.take_Shorts(items);
    }
}
final class test_ints_ {
    
    private test_ints_() {
    }
    
    static void test_ints() {
        final .com.redhat.ceylon.compiler.java.test.interop.TypesJava java = new .com.redhat.ceylon.compiler.java.test.interop.TypesJava();
        final int[] items = .com.redhat.ceylon.compiler.java.Util.checkNull(java.return_ints());
        final .ceylon.language.Integer n = .ceylon.language.Integer.instance(items[0]);
        .ceylon.language.Integer n$38;
        if ((n$38 = n) != null) {
            final long n$39 = n$38.longValue();
            items[1] = .com.redhat.ceylon.compiler.java.Util.toInt(n$39);
        }
        java.take_ints(items);
        new int[2];
        final .ceylon.language.Callable<? extends .java.lang.Object> ctorRef = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<int[]>(.com.redhat.ceylon.compiler.java.language.IntArray.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, 1, .ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.$TypeDescriptor$), "IntArray(Integer, Integer=)", (short)-1){
            
            @.java.lang.Override
            public int[] $call$(final .java.lang.Object $param$0) {
                final int $ceylontmp$size = .com.redhat.ceylon.compiler.java.Util.toInt(((.ceylon.language.Integer)$param$0).longValue());
                return new int[$ceylontmp$size];
            }
            
            @.java.lang.Override
            public int[] $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                final int $ceylontmp$size = .com.redhat.ceylon.compiler.java.Util.toInt(((.ceylon.language.Integer)$param$0).longValue());
                final int $ceylontmp$element = .com.redhat.ceylon.compiler.java.Util.toInt(((.ceylon.language.Integer)$param$1).longValue());
                return .com.redhat.ceylon.compiler.java.Util.fillArray(new int[$ceylontmp$size], $ceylontmp$element);
            }
        };
        final int[] cloned = .com.redhat.ceylon.compiler.java.language.IntArray.$clone(items);
    }
}
final class test_JIntegers_ {
    
    private test_JIntegers_() {
    }
    
    static void test_JIntegers() {
        final .com.redhat.ceylon.compiler.java.test.interop.TypesJava java = new .com.redhat.ceylon.compiler.java.test.interop.TypesJava();
        final .java.lang.Integer[] items = .com.redhat.ceylon.compiler.java.Util.checkNull(java.return_Integers());
        final .java.lang.Integer n = items[0];
        .java.lang.Integer n$41;
        if ((n$41 = n) != null) {
            final .java.lang.Integer n$42 = n$41;
            items[1] = n$42;
        }
        java.take_Integers(items);
    }
}
final class test_longs_ {
    
    private test_longs_() {
    }
    
    static void test_longs() {
        final .com.redhat.ceylon.compiler.java.test.interop.TypesJava java = new .com.redhat.ceylon.compiler.java.test.interop.TypesJava();
        final long[] items = .com.redhat.ceylon.compiler.java.Util.checkNull(java.return_longs());
        final .ceylon.language.Integer n = .ceylon.language.Integer.instance(items[0]);
        .ceylon.language.Integer n$44;
        if ((n$44 = n) != null) {
            final long n$45 = n$44.longValue();
            items[1] = n$45;
        }
        java.take_longs(items);
        new long[2];
        final .ceylon.language.Callable<? extends .java.lang.Object> ctorRef = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<long[]>(.com.redhat.ceylon.compiler.java.language.LongArray.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, 1, .ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.$TypeDescriptor$), "LongArray(Integer, Integer=)", (short)-1){
            
            @.java.lang.Override
            public long[] $call$(final .java.lang.Object $param$0) {
                final int $ceylontmp$size = .com.redhat.ceylon.compiler.java.Util.toInt(((.ceylon.language.Integer)$param$0).longValue());
                return new long[$ceylontmp$size];
            }
            
            @.java.lang.Override
            public long[] $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                final int $ceylontmp$size = .com.redhat.ceylon.compiler.java.Util.toInt(((.ceylon.language.Integer)$param$0).longValue());
                final long $ceylontmp$element = ((.ceylon.language.Integer)$param$1).longValue();
                return .com.redhat.ceylon.compiler.java.Util.fillArray(new long[$ceylontmp$size], $ceylontmp$element);
            }
        };
        final long[] cloned = .com.redhat.ceylon.compiler.java.language.LongArray.$clone(items);
    }
}
final class test_JLongs_ {
    
    private test_JLongs_() {
    }
    
    static void test_JLongs() {
        final .com.redhat.ceylon.compiler.java.test.interop.TypesJava java = new .com.redhat.ceylon.compiler.java.test.interop.TypesJava();
        final .java.lang.Long[] items = .com.redhat.ceylon.compiler.java.Util.checkNull(java.return_Longs());
        final .java.lang.Long n = items[0];
        .java.lang.Long n$47;
        if ((n$47 = n) != null) {
            final .java.lang.Long n$48 = n$47;
            items[1] = n$48;
        }
        java.take_Longs(items);
    }
}
final class test_floats_ {
    
    private test_floats_() {
    }
    
    static void test_floats() {
        final .com.redhat.ceylon.compiler.java.test.interop.TypesJava java = new .com.redhat.ceylon.compiler.java.test.interop.TypesJava();
        final float[] items = .com.redhat.ceylon.compiler.java.Util.checkNull(java.return_floats());
        final .ceylon.language.Float f = .ceylon.language.Float.instance(items[0]);
        .ceylon.language.Float f$50;
        if ((f$50 = f) != null) {
            final double f$51 = f$50.doubleValue();
            items[1] = (float)f$51;
        }
        java.take_floats(items);
        new float[2];
        final .ceylon.language.Callable<? extends .java.lang.Object> ctorRef = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<float[]>(.com.redhat.ceylon.compiler.java.language.FloatArray.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, 1, .ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Float.$TypeDescriptor$), "FloatArray(Integer, Float=)", (short)-1){
            
            @.java.lang.Override
            public float[] $call$(final .java.lang.Object $param$0) {
                final int $ceylontmp$size = .com.redhat.ceylon.compiler.java.Util.toInt(((.ceylon.language.Integer)$param$0).longValue());
                return new float[$ceylontmp$size];
            }
            
            @.java.lang.Override
            public float[] $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                final int $ceylontmp$size = .com.redhat.ceylon.compiler.java.Util.toInt(((.ceylon.language.Integer)$param$0).longValue());
                final float $ceylontmp$element = (float)((.ceylon.language.Float)$param$1).doubleValue();
                return .com.redhat.ceylon.compiler.java.Util.fillArray(new float[$ceylontmp$size], $ceylontmp$element);
            }
        };
        final float[] cloned = .com.redhat.ceylon.compiler.java.language.FloatArray.$clone(items);
    }
}
final class test_JFloats_ {
    
    private test_JFloats_() {
    }
    
    static void test_JFloats() {
        final .com.redhat.ceylon.compiler.java.test.interop.TypesJava java = new .com.redhat.ceylon.compiler.java.test.interop.TypesJava();
        final .java.lang.Float[] items = .com.redhat.ceylon.compiler.java.Util.checkNull(java.return_Floats());
        final .java.lang.Float f = items[0];
        .java.lang.Float f$53;
        if ((f$53 = f) != null) {
            final .java.lang.Float f$54 = f$53;
            items[1] = f$54;
        }
        java.take_Floats(items);
    }
}
final class test_doubles_ {
    
    private test_doubles_() {
    }
    
    static void test_doubles() {
        final .com.redhat.ceylon.compiler.java.test.interop.TypesJava java = new .com.redhat.ceylon.compiler.java.test.interop.TypesJava();
        final double[] items = .com.redhat.ceylon.compiler.java.Util.checkNull(java.return_doubles());
        final .ceylon.language.Float f = .ceylon.language.Float.instance(items[0]);
        .ceylon.language.Float f$56;
        if ((f$56 = f) != null) {
            final double f$57 = f$56.doubleValue();
            items[1] = f$57;
        }
        java.take_doubles(items);
        new double[2];
        final .ceylon.language.Callable<? extends .java.lang.Object> ctorRef = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<double[]>(.com.redhat.ceylon.compiler.java.language.DoubleArray.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, 1, .ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Float.$TypeDescriptor$), "DoubleArray(Integer, Float=)", (short)-1){
            
            @.java.lang.Override
            public double[] $call$(final .java.lang.Object $param$0) {
                final int $ceylontmp$size = .com.redhat.ceylon.compiler.java.Util.toInt(((.ceylon.language.Integer)$param$0).longValue());
                return new double[$ceylontmp$size];
            }
            
            @.java.lang.Override
            public double[] $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                final int $ceylontmp$size = .com.redhat.ceylon.compiler.java.Util.toInt(((.ceylon.language.Integer)$param$0).longValue());
                final double $ceylontmp$element = ((.ceylon.language.Float)$param$1).doubleValue();
                return .com.redhat.ceylon.compiler.java.Util.fillArray(new double[$ceylontmp$size], $ceylontmp$element);
            }
        };
        final double[] cloned = .com.redhat.ceylon.compiler.java.language.DoubleArray.$clone(items);
    }
}
final class test_JDoubles_ {
    
    private test_JDoubles_() {
    }
    
    static void test_JDoubles() {
        final .com.redhat.ceylon.compiler.java.test.interop.TypesJava java = new .com.redhat.ceylon.compiler.java.test.interop.TypesJava();
        final .java.lang.Double[] items = .com.redhat.ceylon.compiler.java.Util.checkNull(java.return_Doubles());
        final .java.lang.Double f = items[0];
        .java.lang.Double f$59;
        if ((f$59 = f) != null) {
            final .java.lang.Double f$60 = f$59;
            items[1] = f$60;
        }
        java.take_Doubles(items);
    }
}
final class test_chars_ {
    
    private test_chars_() {
    }
    
    static void test_chars() {
        final .com.redhat.ceylon.compiler.java.test.interop.TypesJava java = new .com.redhat.ceylon.compiler.java.test.interop.TypesJava();
        final char[] items = .com.redhat.ceylon.compiler.java.Util.checkNull(java.return_chars());
        final .ceylon.language.Character c = .ceylon.language.Character.instance(items[0]);
        .ceylon.language.Character c$62;
        if ((c$62 = c) != null) {
            final int c$63 = c$62.intValue();
            items[1] = (char)c$63;
        }
        java.take_chars(items);
        final int[] ints = .com.redhat.ceylon.compiler.java.Util.checkNull(java.return_ints());
        final .ceylon.language.Array<.java.lang.Integer> chars1 = .com.redhat.ceylon.compiler.java.language.IntArray.getArray(ints);
        final .ceylon.language.Array<.ceylon.language.Character> chars2 = .com.redhat.ceylon.compiler.java.language.IntArray.getCodePointArray(ints);
        final char[] cloned = .com.redhat.ceylon.compiler.java.language.CharArray.$clone(items);
    }
}
final class test_JCharacters_ {
    
    private test_JCharacters_() {
    }
    
    static void test_JCharacters() {
        final .com.redhat.ceylon.compiler.java.test.interop.TypesJava java = new .com.redhat.ceylon.compiler.java.test.interop.TypesJava();
        final .java.lang.Character[] items = .com.redhat.ceylon.compiler.java.Util.checkNull(java.return_Characters());
        final .java.lang.Character c = items[0];
        .java.lang.Character c$65;
        if ((c$65 = c) != null) {
            final .java.lang.Character c$66 = c$65;
            items[1] = c$66;
        }
        java.take_Characters(items);
    }
}
final class test_Strings_ {
    
    private test_Strings_() {
    }
    
    static void test_Strings() {
        final .com.redhat.ceylon.compiler.java.test.interop.TypesJava java = new .com.redhat.ceylon.compiler.java.test.interop.TypesJava();
        final .java.lang.String[] items = .com.redhat.ceylon.compiler.java.Util.checkNull(java.return_Strings());
        final .java.lang.String s = items[0];
        .java.lang.String s$68;
        if ((s$68 = s) != null) {
            final .java.lang.String s$69 = s$68;
            items[1] = s$69;
        }
        items[1] = s;
        ((.java.lang.Object[])items)[1] = java;
        java.take_Strings(items);
        final .ceylon.language.String[] ceylonStrings = new .ceylon.language.String[0];
        final .ceylon.language.Array<.ceylon.language.String> ceylonStringArray = .com.redhat.ceylon.compiler.java.language.ObjectArray<? extends .ceylon.language.String>.getArray(ceylonStrings);
        final .ceylon.language.Array<.java.lang.String> javaStringArray = .com.redhat.ceylon.compiler.java.language.ObjectArray<? extends .java.lang.String>.getArray(items);
        final .java.lang.String[] cloned = .com.redhat.ceylon.compiler.java.language.ObjectArray<? extends .java.lang.String>.$clone(items);
    }
}
final class test_Objects_ {
    
    private test_Objects_() {
    }
    
    static void test_Objects() {
        final .com.redhat.ceylon.compiler.java.test.interop.TypesJava java = new .com.redhat.ceylon.compiler.java.test.interop.TypesJava();
        final .java.lang.Object[] items = .com.redhat.ceylon.compiler.java.Util.checkNull(java.return_Objects());
        final .java.lang.Object o = items[0];
        final .java.lang.Object o2 = .com.redhat.ceylon.compiler.java.Util.checkNull(items[0]);
        .java.lang.Object o$71;
        if ((o$71 = o) != null) {
            final .java.lang.Object o$72 = o$71;
            items[1] = o$72;
            items[1] = null;
        }
        java.take_Objects(items);
        final .java.lang.Object[] cloned = .com.redhat.ceylon.compiler.java.language.ObjectArray<? extends .java.lang.Object>.$clone(items);
    }
}