package com.redhat.ceylon.compiler.java.test.expression.optimisations;

final class inCharacterSpan_ {
    
    private inCharacterSpan_() {
    }
    
    static void inCharacterSpan(final int x, final int y, final int z) {
        boolean b = false;
        b = (
            let
            {
                int $ceylontmp$x$0 = x;
                int $ceylontmp$first$1 = 97;
                int $ceylontmp$last$2 = 122;
                boolean $ceylontmp$recursive$3 = $ceylontmp$first$1 > .ceylon.language.Character.getSuccessor($ceylontmp$first$1) && .ceylon.language.Character.getPredecessor($ceylontmp$last$2) > $ceylontmp$last$2;
            }
            returning $ceylontmp$first$1 < $ceylontmp$last$2 ? $ceylontmp$x$0 <= $ceylontmp$last$2 && $ceylontmp$x$0 >= $ceylontmp$first$1 : $ceylontmp$x$0 >= $ceylontmp$last$2 && $ceylontmp$x$0 <= $ceylontmp$first$1;
        );
        b = (
            let
            {
                int $ceylontmp$x$4 = x;
                int $ceylontmp$first$5 = y;
                int $ceylontmp$last$6 = z;
                boolean $ceylontmp$recursive$7 = $ceylontmp$first$5 > .ceylon.language.Character.getSuccessor($ceylontmp$first$5) && .ceylon.language.Character.getPredecessor($ceylontmp$last$6) > $ceylontmp$last$6;
            }
            returning $ceylontmp$first$5 < $ceylontmp$last$6 ? $ceylontmp$x$4 <= $ceylontmp$last$6 && $ceylontmp$x$4 >= $ceylontmp$first$5 : $ceylontmp$x$4 >= $ceylontmp$last$6 && $ceylontmp$x$4 <= $ceylontmp$first$5;
        );
    }
}