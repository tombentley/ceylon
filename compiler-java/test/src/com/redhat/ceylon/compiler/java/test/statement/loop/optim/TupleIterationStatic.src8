package com.redhat.ceylon.compiler.java.test.statement.loop.optim;

class TupleIterationStatic implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    
    TupleIterationStatic() {
    }
    
    private final void tupleOfIntegers$priv$(final .ceylon.language.Sequence<? extends .ceylon.language.Integer> seq) {
        boolean loopentered$0 = false;
        .java.lang.Object elem$1;
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> element$iterator$$2 = ((.ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object>)(.ceylon.language.Iterable)seq).iterator();
        loop_0: while (!((elem$1 = element$iterator$$2.next()) instanceof .ceylon.language.Finished)) {
            loopentered$0 = true;
            final long element = ((.ceylon.language.Integer)elem$1).longValue();
            .ceylon.language.print_.print(.ceylon.language.Integer.instance(element + 5L));
        }
        if (!loopentered$0) throw new .ceylon.language.AssertionError("nonempty Iterable with initial \'finished\' element");
    }
    
    private final void tupleOfIntegersWithBreak$priv$(final .ceylon.language.Sequence<? extends .ceylon.language.Integer> array) {
        boolean doforelse$3 = true;
        boolean loopentered$4 = false;
        .java.lang.Object elem$5;
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> element$iterator$$6 = ((.ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object>)(.ceylon.language.Iterable)array).iterator();
        loop_1: while (!((elem$5 = element$iterator$$6.next()) instanceof .ceylon.language.Finished)) {
            loopentered$4 = true;
            final long element = ((.ceylon.language.Integer)elem$5).longValue();
            
            final class x_ {
                
                private x_() {
                }
                
                long x() {
                    return element + 10L;
                }
            }
            final x_ x = new x_();
            if (element == 10L) {
                doforelse$3 = false;
                break loop_1;
            }
        }
        if (!loopentered$4) throw new .ceylon.language.AssertionError("nonempty Iterable with initial \'finished\' element");
        if (doforelse$3) {
            .ceylon.language.print_.print(.ceylon.language.String.instance("foo"));
        }
    }
    
    private final void keyValue$priv$(final .ceylon.language.Sequence<? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .ceylon.language.Float>> array) {
        boolean loopentered$8 = false;
        .java.lang.Object elem$9;
        .ceylon.language.Iterator<? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .ceylon.language.Float>> elem$9$iterator$ = ((.ceylon.language.Iterable<? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .ceylon.language.Float>, ? extends .java.lang.Object>)(.ceylon.language.Iterable)array).iterator();
        loop_2: while (!((elem$9 = elem$9$iterator$.next()) instanceof .ceylon.language.Finished)) {
            loopentered$8 = true;
            final long i = ((.ceylon.language.Integer)((.ceylon.language.Entry)elem$9).getKey()).longValue();
            final double f = ((.ceylon.language.Float)((.ceylon.language.Entry)elem$9).getItem()).doubleValue();
            .ceylon.language.print_.print(.ceylon.language.String.instance(new .java.lang.StringBuilder().append(i).append("->").append(f).toString()));
        }
        if (!loopentered$8) throw new .ceylon.language.AssertionError("nonempty Iterable with initial \'finished\' element");
        final .ceylon.language.Sequence myTuple = (.ceylon.language.Sequence<? extends .java.lang.Object>).ceylon.language.Tuple.instance(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Entry.class, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Entry.class, .ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Entry.class, .ceylon.language.Float.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), new .java.lang.Object[]{
                new .ceylon.language.Entry<.ceylon.language.String, .ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.instance("1"), .ceylon.language.String.instance("one")),
                new .ceylon.language.Entry<.ceylon.language.Integer, .ceylon.language.String>(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.Integer.instance(2L), .ceylon.language.String.instance("two")),
                new .ceylon.language.Entry<.ceylon.language.Float, .ceylon.language.String>(.ceylon.language.Float.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.Float.instance(3.0), .ceylon.language.String.instance("three"))});
        boolean loopentered$10 = false;
        .java.lang.Object elem$11;
        .ceylon.language.Iterator<? extends .java.lang.Object> elem$11$iterator$ = myTuple.iterator();
        loop_3: while (!((elem$11 = elem$11$iterator$.next()) instanceof .ceylon.language.Finished)) {
            loopentered$10 = true;
            final .java.lang.Object foo = ((.ceylon.language.Entry)elem$11).getKey();
            final .java.lang.String name = ((.ceylon.language.String)((.ceylon.language.Entry)elem$11).getItem()).toString();
            .ceylon.language.print_.print(.ceylon.language.String.instance(new .java.lang.StringBuilder().append(name).append("<-").append(foo.toString()).toString()));
        }
        if (!loopentered$10) throw new .ceylon.language.AssertionError("nonempty Iterable with initial \'finished\' element");
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.statement.loop.optim.TupleIterationStatic.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.statement.loop.optim.TupleIterationStatic.class);
}