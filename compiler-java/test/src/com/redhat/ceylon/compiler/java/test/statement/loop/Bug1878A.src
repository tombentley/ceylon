package com.redhat.ceylon.compiler.java.test.statement.loop;

final class bug1878A_ {
    
    private bug1878A_() {
    }
    
    static boolean bug1878A() {
        final long $ceylontmp$first$1 = 1L;
        final long $ceylontmp$last$2 = 1L;
        final boolean $ceylontmp$increasing$3 = .ceylon.language.Integer.offset($ceylontmp$last$2, $ceylontmp$first$1) >= 0;
        final long $ceylontmp$incr$4 = $ceylontmp$increasing$3 ? 1L : -1L;
        long _$7 = $ceylontmp$first$1;
        long $ceylontmp$element$6 = $ceylontmp$first$1;
        boolean $ceylontmp$f$5 = false;
        loop_0: do {
            if ($ceylontmp$f$5) $ceylontmp$element$6 += $ceylontmp$incr$4;
            $ceylontmp$f$5 = true;
            _$7 = $ceylontmp$element$6;
            final long _ = _$7;
            $ceylontmp$continue$0: do {
                return false;
            }             while (false);
        }         while ($ceylontmp$increasing$3 ? _$7 - $ceylontmp$last$2 != 0L : _$7 - $ceylontmp$last$2 != 0L);
    }
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 8)
@.com.redhat.ceylon.compiler.java.metadata.Method
final class bug1878A2_ {
    
    private bug1878A2_() {
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Boolean")
    static boolean bug1878A2() {
        final long $ceylontmp$step$16 = 2L;
        if ($ceylontmp$step$16 <= 0) throw new .ceylon.language.AssertionError("Assertion failed" + ": step size must be greater than zero" + (.java.lang.System.lineSeparator() + "\tviolated " + "step > 0"));
        final long $ceylontmp$first$9 = 1L;
        final long $ceylontmp$last$10 = 1L;
        final boolean $ceylontmp$increasing$11 = $ceylontmp$step$16 == 1 ? .ceylon.language.Integer.offset($ceylontmp$last$10, $ceylontmp$first$9) >= 0 : .ceylon.language.Integer.offsetSign($ceylontmp$last$10, $ceylontmp$first$9) >= 0;
        final long $ceylontmp$incr$12 = $ceylontmp$step$16 == 1 ? $ceylontmp$increasing$11 ? $ceylontmp$step$16 : -1L : $ceylontmp$increasing$11 ? $ceylontmp$step$16 : -$ceylontmp$step$16;
        long _$15 = $ceylontmp$first$9;
        long $ceylontmp$element$14 = $ceylontmp$first$9;
        boolean $ceylontmp$f$13 = false;
        loop_1: do {
            if ($ceylontmp$f$13 && $ceylontmp$step$16 == 1L) $ceylontmp$step$16 == 1 ? $ceylontmp$element$14 += $ceylontmp$incr$12 : ($ceylontmp$element$14 = .ceylon.language.Integer.neighbour($ceylontmp$element$14, $ceylontmp$incr$12));
            $ceylontmp$f$13 = true;
            _$15 = $ceylontmp$element$14;
            final long _ = _$15;
            $ceylontmp$continue$8: do {
                return false;
            }             while (false);
        }         while ($ceylontmp$step$16 == 1L ? $ceylontmp$step$16 == 1 ? $ceylontmp$increasing$11 ? _$15 - $ceylontmp$last$10 != 0L : _$15 - $ceylontmp$last$10 != 0L : $ceylontmp$increasing$11 ? .ceylon.language.Integer.offsetSign(_$15, $ceylontmp$last$10) <= 0L && .ceylon.language.Integer.offsetSign(_$15, $ceylontmp$first$9) >= 0L : .ceylon.language.Integer.offsetSign(_$15, $ceylontmp$last$10) >= 0L && .ceylon.language.Integer.offsetSign(_$15, $ceylontmp$first$9) <= 0L : $ceylontmp$step$16 == 1 ? $ceylontmp$increasing$11 ? $ceylontmp$element$14 - $ceylontmp$last$10 != 0L : $ceylontmp$element$14 - $ceylontmp$last$10 != 0L : $ceylontmp$increasing$11 ? .ceylon.language.Integer.offsetSign($ceylontmp$element$14, $ceylontmp$last$10) <= 0L && .ceylon.language.Integer.offsetSign($ceylontmp$element$14, $ceylontmp$first$9) >= 0L : .ceylon.language.Integer.offsetSign($ceylontmp$element$14, $ceylontmp$last$10) >= 0L && .ceylon.language.Integer.offsetSign($ceylontmp$element$14, $ceylontmp$first$9) <= 0L);
    }
}