--- src/share/classes/com/sun/tools/javac/jvm/Pool.java	2016-02-10 11:54:12.694194840 +0000
+++ src/share/classes/com/sun/tools/javac/jvm/Pool.java	2016-02-11 09:51:01.970961165 +0000
@@ -27,7 +27,13 @@
 
 import java.util.*;
 
+import com.sun.tools.javac.code.Kinds;
+import com.sun.tools.javac.code.Symbol;
+import com.sun.tools.javac.code.Type;
 import com.sun.tools.javac.code.Symbol.*;
+import com.sun.tools.javac.util.Assert;
+import com.sun.tools.javac.util.Filter;
+import com.sun.tools.javac.util.Name;
 
 /** An internal structure that corresponds to the constant pool of a classfile.
  *
@@ -96,10 +102,8 @@
      *  package.  Return the object's index in the pool.
      */
     public int put(Object value) {
-        if (value instanceof MethodSymbol)
-            value = new Method((MethodSymbol)value);
-        else if (value instanceof VarSymbol)
-            value = new Variable((VarSymbol)value);
+        // Backported by Ceylon from JDK8
+        value = makePoolValue(value);
 //      assert !(value instanceof Type.TypeVar);
         Integer index = indices.get(value);
         if (index == null) {
@@ -159,6 +176,40 @@
         }
     }
 
+    // Backported by Ceylon from JDK8
+    static class DynamicMethod extends Method {
+        public Object[] uniqueStaticArgs;
+
+        DynamicMethod(DynamicMethodSymbol m) {
+            super(m);
+            uniqueStaticArgs = m.staticArgs;
+        }
+
+        @Override
+        public boolean equals(Object any) {
+            if (!super.equals(any)) return false;
+            if (!(any instanceof DynamicMethod)) return false;
+            DynamicMethodSymbol dm1 = (DynamicMethodSymbol)other;
+            DynamicMethodSymbol dm2 = (DynamicMethodSymbol)((DynamicMethod)any).other;
+            return dm1.bsm == dm2.bsm &&
+                        dm1.bsmKind == dm2.bsmKind &&
+                        Arrays.equals(uniqueStaticArgs,
+                            ((DynamicMethod)any).uniqueStaticArgs);
+        }
+
+        @Override
+        public int hashCode() {
+            int hash = super.hashCode();
+            DynamicMethodSymbol dm = (DynamicMethodSymbol)other;
+            hash += dm.bsmKind * 7 +
+                    dm.bsm.hashCode() * 11;
+            for (int i = 0; i < dm.staticArgs.length; i++) {
+                hash += (uniqueStaticArgs[i].hashCode() * 23);
+            }
+            return hash;
+        }
+    }
+
     static class Variable extends DelegatedSymbol {
         VarSymbol v;
         Variable(VarSymbol v) {
