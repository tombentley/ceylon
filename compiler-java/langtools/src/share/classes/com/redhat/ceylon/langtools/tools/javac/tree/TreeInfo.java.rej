--- src/share/classes/com/sun/tools/javac/tree/TreeInfo.java	2016-02-10 11:54:12.724194243 +0000
+++ src/share/classes/com/sun/tools/javac/tree/TreeInfo.java	2016-02-11 09:51:02.359940515 +0000
@@ -25,16 +25,17 @@
 
 package com.sun.tools.javac.tree;
 
+import static com.sun.tools.javac.code.Flags.*;
+
+import java.util.Map;
+
 import com.sun.source.tree.Tree;
+import com.sun.tools.javac.code.*;
 import com.sun.tools.javac.comp.AttrContext;
 import com.sun.tools.javac.comp.Env;
-import java.util.Map;
+import com.sun.tools.javac.tree.JCTree.*;
 import com.sun.tools.javac.util.*;
 import com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition;
-import com.sun.tools.javac.code.*;
-import com.sun.tools.javac.tree.JCTree.*;
-
-import static com.sun.tools.javac.code.Flags.*;
 
 /** Utility class containing inspector methods for trees.
  *
@@ -143,41 +144,44 @@
         return false;
     }
 
-    /** If the expression is a method call, return the method name, null
-     *  otherwise. */
-    public static Name calledMethodName(JCTree tree) {
+    /** Returns true if the expression is a method call calling one of the given
+     * methods, or if it's a let whose last stmt is a method call calling on 
+     * the given methods, otherwise false */
+    private static boolean calledMethodNameIncludesAny(JCTree tree, Name... names) {
         if (tree.getTag() == JCTree.EXEC) {
             JCExpressionStatement exec = (JCExpressionStatement)tree;
             if (exec.expr.getTag() == JCTree.APPLY) {
                 Name mname = TreeInfo.name(((JCMethodInvocation) exec.expr).meth);
-                return mname;
+                for (Name name : names) {
+                    if (mname==name) {
+                        return true;
+                    }
+                }
+                return false;
+            }
+            if (exec.expr.getTag() == JCTree.LETEXPR) {
+                LetExpr let = (LetExpr)exec.expr;
+                for (JCStatement stmt : let.stats) {
+                    if (calledMethodNameIncludesAny(stmt, names)) {
+                        return true;
             }
         }
-        return null;
+                return calledMethodNameIncludesAny(let.expr);
+            }
+        }
+        return false;
     }
 
     /** Is this a call to this or super?
      */
-    public static boolean isSelfCall(JCTree tree) {
-        Name name = calledMethodName(tree);
-        if (name != null) {
-            Names names = name.table.names;
-            return name==names._this || name==names._super;
-        } else {
-            return false;
-        }
+    public static boolean isSelfCall(Names names, JCTree tree) {
+        return calledMethodNameIncludesAny(tree, names._this, names._super);
     }
 
     /** Is this a call to super?
      */
-    public static boolean isSuperCall(JCTree tree) {
-        Name name = calledMethodName(tree);
-        if (name != null) {
-            Names names = name.table.names;
-            return name==names._super;
-        } else {
-            return false;
-        }
+    public static boolean isSuperCall(Names names, JCTree tree) {
+        return calledMethodNameIncludesAny(tree, names._super);
     }
 
     /** Is this a constructor whose first (non-synthetic) statement is not
