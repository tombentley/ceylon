--- src/share/classes/com/sun/tools/javac/api/JavacTaskImpl.java	2016-02-10 11:54:12.651195697 +0000
+++ src/share/classes/com/sun/tools/javac/api/JavacTaskImpl.java	2016-02-11 09:51:02.304943434 +0000
@@ -47,6 +49,7 @@
 import com.sun.tools.javac.comp.*;
 import com.sun.tools.javac.file.JavacFileManager;
 import com.sun.tools.javac.main.*;
+import com.sun.tools.javac.main.JavaCompiler;
 import com.sun.tools.javac.model.*;
 import com.sun.tools.javac.parser.Parser;
 import com.sun.tools.javac.parser.ParserFactory;
@@ -54,7 +57,6 @@
 import com.sun.tools.javac.tree.JCTree.*;
 import com.sun.tools.javac.util.*;
 import com.sun.tools.javac.util.List;
-import com.sun.tools.javac.main.JavaCompiler;
 
 /**
  * Provides access to functionality specific to the JDK Java Compiler, javac.
@@ -73,12 +75,12 @@
     private JavaCompiler compiler;
     private Locale locale;
     private String[] args;
-    private Context context;
+    protected Context context;
     private List<JavaFileObject> fileObjects;
     private Map<JavaFileObject, JCCompilationUnit> notYetEntered;
     private ListBuffer<Env<AttrContext>> genList;
-    private TaskListener taskListener;
-    private AtomicBoolean used = new AtomicBoolean();
+    protected TaskListener taskListener;
+    protected AtomicBoolean used = new AtomicBoolean();
     private Iterable<? extends Processor> processors;
 
     private Integer result = null;
@@ -99,7 +101,7 @@
         fileObjects.getClass();
     }
 
-    JavacTaskImpl(Main compilerMain,
+    protected JavacTaskImpl(Main compilerMain,
                 Iterable<String> flags,
                 Context context,
                 Iterable<String> classes,
@@ -180,7 +182,7 @@
         }
     }
 
-    private void initContext() {
+    protected void initContext() {
         context.put(JavacTaskImpl.class, this);
         if (context.get(TaskListener.class) != null)
             context.put(TaskListener.class, (TaskListener)null);
