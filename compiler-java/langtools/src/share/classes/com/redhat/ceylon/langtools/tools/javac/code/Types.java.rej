--- src/share/classes/com/sun/tools/javac/code/Types.java	2016-02-10 11:54:12.664195438 +0000
+++ src/share/classes/com/sun/tools/javac/code/Types.java	2016-02-11 09:51:02.011958988 +0000
@@ -25,24 +25,23 @@
 
 package com.sun.tools.javac.code;
 
+import static com.sun.tools.javac.code.BoundKind.*;
+import static com.sun.tools.javac.code.Flags.*;
+import static com.sun.tools.javac.code.Scope.*;
+import static com.sun.tools.javac.code.Symbol.*;
+import static com.sun.tools.javac.code.Type.*;
+import static com.sun.tools.javac.code.TypeTags.*;
+import static com.sun.tools.javac.util.ListBuffer.lb;
+
 import java.lang.ref.SoftReference;
 import java.util.*;
 
-import com.sun.tools.javac.util.*;
-import com.sun.tools.javac.util.List;
-
-import com.sun.tools.javac.jvm.ClassReader;
 import com.sun.tools.javac.code.Attribute.RetentionPolicy;
 import com.sun.tools.javac.code.Lint.LintCategory;
 import com.sun.tools.javac.comp.Check;
-
-import static com.sun.tools.javac.code.Scope.*;
-import static com.sun.tools.javac.code.Type.*;
-import static com.sun.tools.javac.code.TypeTags.*;
-import static com.sun.tools.javac.code.Symbol.*;
-import static com.sun.tools.javac.code.Flags.*;
-import static com.sun.tools.javac.code.BoundKind.*;
-import static com.sun.tools.javac.util.ListBuffer.lb;
+import com.sun.tools.javac.jvm.ClassReader;
+import com.sun.tools.javac.util.*;
+import com.sun.tools.javac.util.List;
 
 /**
  * Utility class containing various operations on types.
@@ -103,6 +104,7 @@
         chk = Check.instance(context);
         capturedName = names.fromString("<captured wildcard>");
         messages = JavacMessages.instance(context);
+        sourceLanguage = SourceLanguage.instance(context);
     }
     // </editor-fold>
 
@@ -1199,10 +1216,19 @@
         return disjointType.visit(t, s);
     }
     // where
-        private TypeRelation disjointType = new TypeRelation() {
+    // Ceylon: turned this from an anonymous class to a real class
+        private DisjointTypeTypeRelation disjointType = new DisjointTypeTypeRelation();
+        
+        private class DisjointTypeTypeRelation extends TypeRelation
+        {
 
             private Set<TypePair> cache = new HashSet<TypePair>();
 
+            // Ceylon
+            private void reset(){
+                cache.clear();
+            }
+            
             public Boolean visitType(Type t, Type s) {
                 if (s.tag == WILDCARD)
                     return visit(s, t);
