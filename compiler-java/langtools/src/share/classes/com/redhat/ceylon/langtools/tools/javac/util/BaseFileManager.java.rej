--- src/share/classes/com/sun/tools/javac/util/BaseFileManager.java	2016-02-10 11:54:12.728194163 +0000
+++ src/share/classes/com/sun/tools/javac/util/BaseFileManager.java	2016-02-11 09:51:02.278944814 +0000
@@ -25,11 +25,6 @@
 
 package com.sun.tools.javac.util;
 
-import com.sun.tools.javac.code.Source;
-import com.sun.tools.javac.main.JavacOption;
-import com.sun.tools.javac.main.OptionName;
-import com.sun.tools.javac.main.RecognizedOptions;
-import com.sun.tools.javac.util.JCDiagnostic.SimpleDiagnosticPosition;
 import java.io.ByteArrayOutputStream;
 import java.io.Closeable;
 import java.io.IOException;
@@ -39,6 +34,7 @@
 import java.lang.reflect.Constructor;
 import java.net.URL;
 import java.net.URLClassLoader;
+import java.nio.Buffer;
 import java.nio.ByteBuffer;
 import java.nio.CharBuffer;
 import java.nio.charset.Charset;
@@ -51,8 +47,14 @@
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.Map;
+
 import javax.tools.JavaFileObject;
 import javax.tools.JavaFileObject.Kind;
+import com.sun.tools.javac.code.Source;
+import com.sun.tools.javac.main.JavacOption;
+import com.sun.tools.javac.main.OptionName;
+import com.sun.tools.javac.main.RecognizedOptions;
+import com.sun.tools.javac.util.JCDiagnostic.SimpleDiagnosticPosition;
 
 /**
  * Utility methods for building a filemanager.
@@ -208,13 +210,15 @@
 
         while (true) {
             CoderResult result = decoder.decode(inbuf, dest, true);
-            dest.flip();
+            // Cast to Buffer to avoid issues with JDK9's addition of ByteBuffer.position()
+            ((Buffer)dest).flip();
 
             if (result.isUnderflow()) { // done reading
                 // make sure there is at least one extra character
                 if (dest.limit() == dest.capacity()) {
                     dest = CharBuffer.allocate(dest.capacity()+1).put(dest);
-                    dest.flip();
+                    // Cast to Buffer to avoid issues with JDK9's addition of ByteBuffer.position()
+                    ((Buffer)dest).flip();
                 }
                 return dest;
             } else if (result.isOverflow()) { // buffer too small; expand
@@ -237,11 +241,13 @@
                 }
 
                 // skip past the coding error
-                inbuf.position(inbuf.position() + result.length());
+                // Cast to Buffer to avoid issues with JDK9's addition of ByteBuffer.position()
+                ((Buffer)inbuf).position(inbuf.position() + result.length());
 
                 // undo the flip() to prepare the output buffer
                 // for more translation
-                dest.position(dest.limit());
+                // Cast to Buffer to avoid issues with JDK9's addition of ByteBuffer.position()
+                ((Buffer)dest).position(dest.limit());
                 dest.limit(dest.capacity());
                 dest.put((char)0xfffd); // backward compatible
             } else {
@@ -289,9 +295,11 @@
                 position,
                 limit - position);
             if (count < 0) break;
-            result.position(position += count);
+            // Cast to Buffer to avoid issues with JDK9's addition of ByteBuffer.position()
+            ((Buffer)result).position(position += count);
         }
-        return (ByteBuffer)result.flip();
+        // Cast to Buffer to avoid issues with JDK9's addition of ByteBuffer.position()
+        return (ByteBuffer)((Buffer)result).flip();
     }
 
     public void recycleByteBuffer(ByteBuffer bb) {
@@ -307,7 +315,8 @@
             if (capacity < 20480) capacity = 20480;
             ByteBuffer result =
                 (cached != null && cached.capacity() >= capacity)
-                ? (ByteBuffer)cached.clear()
+                // Cast to Buffer to avoid issues with JDK9's addition of ByteBuffer.position()
+                ? (ByteBuffer)((Buffer)cached).clear()
                 : ByteBuffer.allocate(capacity + capacity>>1);
             cached = null;
             return result;
@@ -334,7 +343,7 @@
             = new HashMap<JavaFileObject, SoftReference<CharBuffer>>();
     // </editor-fold>
 
-    public static Kind getKind(String name) {
+    public Kind getKind(String name) {
         if (name.endsWith(Kind.CLASS.extension))
             return Kind.CLASS;
         else if (name.endsWith(Kind.SOURCE.extension))
