--- src/share/classes/com/sun/tools/javac/tree/JCTree.java	2016-02-10 11:54:12.722194282 +0000
+++ src/share/classes/com/sun/tools/javac/tree/JCTree.java	2016-02-11 09:51:02.352940886 +0000
@@ -27,8 +27,11 @@
 
 import java.util.*;
 
+import static com.sun.tools.javac.code.BoundKind.*;
+
 import java.io.IOException;
 import java.io.StringWriter;
+
 import javax.lang.model.element.Modifier;
 import javax.lang.model.type.TypeKind;
 import javax.tools.JavaFileObject;
@@ -32,16 +35,13 @@
 import javax.lang.model.element.Modifier;
 import javax.lang.model.type.TypeKind;
 import javax.tools.JavaFileObject;
-
-import com.sun.tools.javac.util.*;
-import com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition;
-import com.sun.tools.javac.util.List;
+import com.sun.source.tree.*;
 import com.sun.tools.javac.code.*;
 import com.sun.tools.javac.code.Scope.*;
 import com.sun.tools.javac.code.Symbol.*;
-import com.sun.source.tree.*;
-
-import static com.sun.tools.javac.code.BoundKind.*;
+import com.sun.tools.javac.util.*;
+import com.sun.tools.javac.util.List;
+import com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition;
 
 /**
  * Root class for abstract syntax tree nodes. It provides definitions
@@ -2114,16 +2146,26 @@
         public void accept(Visitor v) { v.visitLetExpr(this); }
 
         public Kind getKind() {
-            throw new AssertionError("LetExpr is not part of a public API");
+            return Kind.LET; 
         }
         @Override
         public <R,D> R accept(TreeVisitor<R,D> v, D d) {
-            throw new AssertionError("LetExpr is not part of a public API");
+            return v.visitLet(this, d);
         }
         @Override
         public int getTag() {
             return LETEXPR;
         }
+
+        @Override
+        public java.util.List<? extends JCStatement> getStatements() {
+            return stats;
+        }
+
+        @Override
+        public JCTree getExpressio() {
+            return expr;
+        }
     }
 
     /** An interface for tree factories
